<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>eclipse使用技巧</title>
      <link href="/2018/06/10/eclipse%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/06/10/eclipse%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h1 id="eclipse将项目分类"><a href="#eclipse将项目分类" class="headerlink" title="eclipse将项目分类"></a>eclipse将项目分类</h1><p>步骤如下<br>  1.<br>  <img src="/images/eclipse/1528614489471.jpg" alt="enter description here" title="1528614489471.jpg"></p><p>  2.<br>  <img src="/images/eclipse/1528614540042.jpg" alt="enter description here" title="1528614540042.jpg"><br>  3.<br>  <img src="/images/eclipse/1528614559308.jpg" alt="enter description here" title="1528614559308.jpg"><br>  4.<br>输入分组名和分组项目，如下图</p><p><img src="/images/eclipse/1528614741025.jpg" alt="enter description here" title="1528614741025.jpg"><br>  5.<br>接着创建分组，如下图</p><p><img src="/images/eclipse/1528614774093.jpg" alt="enter description here" title="1528614774093.jpg"></p><p>  6.<br><img src="/images/eclipse/1528614794747.jpg" alt="enter description here" title="1528614794747.jpg"><br>  7.<br><img src="/images/eclipse/1528614907070.jpg" alt="enter description here" title="1528614907070.jpg"></p><p>  8.<br><img src="/images/eclipse/1528614925700.jpg" alt="enter description here" title="1528614925700.jpg"><br>  9.<br>启用分组，如下图</p><p><img src="/images/eclipse/1528614957828.jpg" alt="enter description here" title="1528614957828.jpg"><br>  10.<br>效果如下图</p><p><img src="/images/eclipse/1528614979731.jpg" alt="enter description here" title="1528614979731.jpg"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>SpringBoot2视频学习笔记</title>
      <link href="/2018/06/03/SpringBoot2%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/06/03/SpringBoot2%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="工具的安装和使用"><a href="#工具的安装和使用" class="headerlink" title="工具的安装和使用"></a>工具的安装和使用</h1><h2 id="Eclipse安装SpringBoot相关插件"><a href="#Eclipse安装SpringBoot相关插件" class="headerlink" title="Eclipse安装SpringBoot相关插件"></a>Eclipse安装SpringBoot相关插件</h2><p>  1.打开SpringBoot官网 <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></p><p><img src="./images/1528011693278.jpg" alt="enter description here" title="1528011693278.jpg"></p><p>  最近版本</p><p>  <img src="./images/1528011902937.jpg" alt="enter description here" title="1528011902937.jpg"></p><p>  2.插件地址：<a href="https://spring.io/tools/sts/all" target="_blank" rel="noopener">https://spring.io/tools/sts/all</a></p><p><img src="./images/1528012219413.jpg" alt="enter description here" title="1528012219413.jpg"></p><p>点击下载最新版本插件</p><p><img src="./images/1528012252046.jpg" alt="enter description here" title="1528012252046.jpg"></p><p>  3.打开eclipse ，点击菜单上的help—&gt;Install New Software</p><p><img src="./images/1528012350490.jpg" alt="enter description here" title="1528012350490.jpg"></p><p>  4.点击add按钮，点击Archive按钮，选择本地插件路径位置，如下图：</p><p>  <img src="./images/1528012479748.jpg" alt="enter description here" title="1528012479748.jpg"></p><p>  5.选择所有的IDE项，选择不更新，点击下一步，如下图：</p><p> <img src="./images/1528012738456.jpg" alt="enter description here" title="1528012738456.jpg"></p><p>  6.安装完成后，重启eclipse</p><h2 id="spring官网下载spring优化后的Eclipse"><a href="#spring官网下载spring优化后的Eclipse" class="headerlink" title="spring官网下载spring优化后的Eclipse"></a>spring官网下载spring优化后的Eclipse</h2><ol><li>官网地址：<a href="https://spring.io/tools/sts/all/" target="_blank" rel="noopener">https://spring.io/tools/sts/all/</a></li></ol><p><img src="./images/1528013079766.jpg" alt="enter description here" title="1528013079766.jpg"></p><p>  2.将解压后目录下的STS.exe上右键，—&gt;发送到—&gt;桌面快捷方式，如下图：</p><p><img src="./images/1528013356022.jpg" alt="enter description here" title="1528013356022.jpg"><br>使用方式和Eclipse一样<br>  3.打开后，界面如下：</p><p>  <img src="./images/1528013495447.jpg" alt="enter description here" title="1528013495447.jpg"></p><h2 id="创建Spring-Boot项目"><a href="#创建Spring-Boot项目" class="headerlink" title="创建Spring Boot项目"></a><a name="createSpringBootProject">创建Spring Boot项目</a></h2><p>上面两种方式，创建Spring Boot项目的方式是一样的，具体步骤如下：</p><p>  1.项目工程处，右键—&gt;new—&gt;Spring Starter Project</p><p>  <img src="./images/1528014205944.jpg" alt="enter description here" title="1528014205944.jpg"></p><p>  如果new后面没有Spring Starter Project，执行如下步骤：<br>  项目工程处，右键—&gt;new—&gt;Other，出现如下图弹框：<br>  <img src="./images/1528014472989.jpg" alt="enter description here" title="1528014472989.jpg"><br>  Wizards下面输入spring后，Spring Starter Project，点击next</p><p>  2.填写好配置后，点击next，如下图：</p><p><img src="./images/1528014658987.jpg" alt="enter description here" title="1528014658987.jpg"></p><p>  3.选择Spring Boot 版本和项目类型，如下图，我选择了2.0.2和web</p><p><img src="./images/1528014773297.jpg" alt="enter description here" title="1528014773297.jpg"><br>点击finish</p><p>  4.项目创建完成之后，目录机构如下图：</p><p>  <img src="./images/1528015072495.jpg" alt="enter description here" title="1528015072495.jpg"></p><h1 id="RESTfull-API简单项目的快速搭建"><a href="#RESTfull-API简单项目的快速搭建" class="headerlink" title="RESTfull API简单项目的快速搭建"></a>RESTfull API简单项目的快速搭建</h1><h2 id="Eclipse快速打开项目文件所在位置"><a href="#Eclipse快速打开项目文件所在位置" class="headerlink" title="Eclipse快速打开项目文件所在位置"></a>Eclipse快速打开项目文件所在位置</h2><p>  1.如图，菜单上右键点击Run—&gt;External Tools—&gt;External Tools Configurations…</p><p>  <img src="./images/1528016395445.jpg" alt="enter description here" title="1528016395445.jpg"></p><p>  2.在Program上右键，选择New，如下图：</p><p>  <img src="./images/1528016534551.jpg" alt="enter description here" title="1528016534551.jpg"></p><p>  3.配置参数，如下图：</p><p>  <img src="./images/1528016786555.jpg" alt="enter description here" title="1528016786555.jpg"></p><p>  4.勾选Common下的External Tools，点击Apply后点击Run</p><p>  <img src="./images/1528016666931.jpg" alt="enter description here" title="1528016666931.jpg"></p><p>  5.以后打开文件，只需要选中文件后，点击下图按钮即可，如图：</p><p>  <img src="./images/1528016862588.jpg" alt="enter description here" title="1528016862588.jpg"></p><h2 id="RESTFull-API简单项目搭建"><a href="#RESTFull-API简单项目搭建" class="headerlink" title="RESTFull API简单项目搭建"></a>RESTFull API简单项目搭建</h2><p>eclipse装完STS插件和使用spring提供的eclipse搭建spring boot项目的方式是一样的，如果项目是spring boot的项目，建议使用STS，对spring的兼容很好。</p><h3 id="基本SpringBoot项目示例"><a href="#基本SpringBoot项目示例" class="headerlink" title="基本SpringBoot项目示例"></a>基本SpringBoot项目示例</h3><p> 1.项目创建过程参考 <a href="#createSpringBootProject"><code>创建Spring Boot项目</code></a> 单元</p><p> 2.创建HelloController，如下图：</p><p> <img src="./images/1528018024689.jpg" alt="enter description here" title="1528018024689.jpg"></p><p> 代码：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>demo1<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello spring boot ..."</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.启动项目，如下图：</p><p><img src="./images/1528018112364.jpg" alt="enter description here" title="1528018112364.jpg"></p><p>4.访问项目，结果如下：</p><p><img src="./images/1528022925801.jpg" alt="enter description here" title="1528022925801.jpg"></p><h3 id="SpringBoot热部署"><a href="#SpringBoot热部署" class="headerlink" title="SpringBoot热部署"></a>SpringBoot热部署</h3><p>添加spring-boot-devtools热部署依赖，快捷方式如下：</p><p><img src="./images/1528023128109.jpg" alt="enter description here" title="1528023128109.jpg"></p><p>或者手动在项目的pom.xml文件中添加如下依赖：</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重启项目</p><p>这个作用就会修改了项目中的东西之后，springboot会自动将修改了的文件重新加载，不会重启tomcat和重新将项目的所有文件都加载一遍。</p><h3 id="添加RESTFull支持"><a href="#添加RESTFull支持" class="headerlink" title="添加RESTFull支持"></a>添加RESTFull支持</h3><p>主要改变在@Controller注解替换为@RestController注解，@RestController注解是一个组合注解，源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The value may indicate a suggestion for a logical component name,     * to be turned into a Spring bean in case of an autodetected component.     * @return the suggested component name, if any (or empty String otherwise)     * @since 4.0.1     */</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，@RestController注解包含了@ResponseBody注解，所以，它下面的controller所有方法，返回的都是JSON数据，本demo中的应用如下：<br>1.创建User对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>demo1<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date date<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建RestFullController，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>demo1<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>demo1<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/rest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestFullHelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser/{id}/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.浏览器请求RestController下的接口，如下图：</p><p><img src="./images/1528024192499.jpg" alt="enter description here" title="1528024192499.jpg"></p><h3 id="SpringBoot单元测试"><a href="#SpringBoot单元测试" class="headerlink" title="SpringBoot单元测试"></a>SpringBoot单元测试</h3><p>1.在要创建单元测试的controller类上右键，如下图：</p><p><img src="./images/1528024584176.jpg" alt="enter description here" title="1528024584176.jpg"></p><p>2.配置测试类位置和类名等基本配置，如下图：</p><p><img src="./images/1528024735139.jpg" alt="enter description here" title="1528024735139.jpg"></p><p>3.选择要测试的方法，如下图：</p><p><img src="./images/1528024759210.jpg" alt="enter description here" title="1528024759210.jpg"></p><p>4.自动创建完成后的测试类如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>demo1<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloControllerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"Not yet implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.编写测试类，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>demo1<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span>MockMvcRequestBuilders<span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>content<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>MockMvc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>RequestBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ResultMatcher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>setup<span class="token punctuation">.</span>MockMvcBuilders<span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloControllerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc <span class="token operator">=</span> MockMvcBuilders<span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        RequestBuilder reBuilder <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>reBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"hello spring boot ..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.运行测试，如下图：</p><p><img src="./images/1528025438344.jpg" alt="enter description here" title="1528025438344.jpg"></p><p>绿色说明，测试通过，其他的controller测试类似。</p><h3 id="springboot的打包"><a href="#springboot的打包" class="headerlink" title="springboot的打包"></a>springboot的打包</h3><p>1.pom.xml中添加SpringBoot打包插件，代码如下：</p><pre class="line-numbers language-xml"><code class="language-xml">            <span class="token comment" spellcheck="true">&lt;!-- springboot 打包插件，作用就是将SpringBoot依赖的jar包导进打的jar包进去  --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置maven打包命令，如下图：</p><p><img src="./images/1528026998033.jpg" alt="enter description here" title="1528026998033.jpg"></p><p><img src="./images/1528027057905.jpg" alt="enter description here" title="1528027057905.jpg"><br>此maven命令的意思是先清除掉上次打的包，再重新打包</p><p>3.点击运行时，一般会报如下错误：</p><p><img src="./images/1528027141403.jpg" alt="enter description here" title="1528027141403.jpg"></p><p>4.配置eclipse的JDK，如下图：</p><p><img src="./images/1528027183258.jpg" alt="enter description here" title="1528027183258.jpg"><br>maven命令打包时，报错是应为项目使用的是jre，改成本地安装的jdk即可。</p><p>5.重新运行打包命令，打包结果如下：</p><p><img src="./images/1528027285726.jpg" alt="enter description here" title="1528027285726.jpg"></p><p>在target目录下会出现项目的jar文件，如下图：</p><p><img src="./images/1528027340061.jpg" alt="enter description here" title="1528027340061.jpg"></p><p>6.打开target所在目录之后，将cmd命令窗口切换到该目录，运行 <code>java -jar 打包的文件名</code> 运行打包的项目，如下图：</p><p><img src="./images/1528027561799.jpg" alt="enter description here" title="1528027561799.jpg"></p><p>浏览器可以正常请求访问，如下图：</p><p><img src="./images/1528027604971.jpg" alt="enter description here" title="1528027604971.jpg"></p><h1 id="配置文件详解：properties与yaml"><a href="#配置文件详解：properties与yaml" class="headerlink" title="配置文件详解：properties与yaml"></a>配置文件详解：properties与yaml</h1><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><h3 id="配置文件的生效顺序，会对值进行覆盖："><a href="#配置文件的生效顺序，会对值进行覆盖：" class="headerlink" title="配置文件的生效顺序，会对值进行覆盖："></a>配置文件的生效顺序，会对值进行覆盖：</h3><p>  1.@TestPropertySource注解<br>  2.命令行参数<br>  3.Java系统属性（System.getProperties()）<br>  4.操作系统环境变量<br>  5.只有在random.*里包含的属性会产生一个 RandomValuePropertySource<br>  6.在打包的jar外的应用程序配置文件（application.properties，包含YAML和profile变量）<br>  7.在打包的jar内的应用程序配置文件（application.properties，包含YAML和profile变量）<br>  8.在@Configuration类上的@PropertySource注解<br>  9.默认属性（使用SpringApplication.setDefaultProperties指定）</p><h3 id="配置随机值"><a href="#配置随机值" class="headerlink" title="配置随机值"></a>配置随机值</h3><p>roncoo.secret=${random.value}<br>roncoo.number=${random.int}<br>roncoo.bignumber=${random.long}<br>roncoo.number.less.than.ten=${random.int(10)}<br>roncoo.number.in.range=${random.int[1024,65536]}</p><p>读取使用注解：@Value(value=”${roncoo.secret}”)</p><p>注：出现黄点提示，是要提示配置元数据，可以不配置</p><h3 id="属性占位符"><a href="#属性占位符" class="headerlink" title="属性占位符"></a>属性占位符</h3><p>当application.properties里的值被使用时，它们被存在的Environment过滤，所以你能够引用先前定义的值（比如，系统属性）。<br>roncoo.name=<a href="http://www.roncoo.com" target="_blank" rel="noopener">www.roncoo.com</a><br>roncoo.desc=${roncoo.name} is a domain name</p><h3 id="Application属性文件，按优先级排序，位置高的将覆盖位置低的"><a href="#Application属性文件，按优先级排序，位置高的将覆盖位置低的" class="headerlink" title="Application属性文件，按优先级排序，位置高的将覆盖位置低的"></a>Application属性文件，按优先级排序，位置高的将覆盖位置低的</h3><p>1.当前目录下的一个/config子目录<br>2.当前目录<br>3.一个classpath下的/config包<br>4.classpath根路径（root）</p><p>这个列表是按照优先级排序的（列表中位置高的将覆盖位置低的）</p><h3 id="配置应用端口和其他配置的介绍"><a href="#配置应用端口和其他配置的介绍" class="headerlink" title="配置应用端口和其他配置的介绍"></a>配置应用端口和其他配置的介绍</h3><p>配置参考文档位置：<a href="https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#common-application-properties</a></p><p> 端口配置：<code>server.port=8090</code><br> 时间格式化：<code>spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</code><br> 配置时区：<code>spring.jackson.time-zone=Asia/wuhan</code></p><h2 id="配置文件-多环境配置"><a href="#配置文件-多环境配置" class="headerlink" title="配置文件-多环境配置"></a>配置文件-多环境配置</h2><p><strong>一、多环境配置的好处</strong><br>1.不同环境配置可以配置不同的参数<br>2.便于部署，提高效率，减少出错</p><p><strong>二、properties多环境配置</strong><br>1.配置激活选项 <code>spring.profiles.active=dev</code><br>2.添加其他配置文件<br>  application-dev.properties<br>  application-prod.properties<br>  application-test.properties<br>  application.properties</p><p><strong>YAML多环境配置</strong><br>1.配置激活选项</p><pre class="line-numbers language-yaml"><code class="language-yaml">spring：    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>        <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.在配置文件添加三个英文状态下的短横线即可区分</p><pre><code>---spring:    profiles: dev</code></pre><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p><strong>一、YAML是什么？</strong><br>YAML是YAML Ain’t Markup Language递归缩写，是YAML不是标记语言的意思，读音“yamel”（或者“雅梅尔”）。YAML是便于人阅读基于unicode编码的各种语言的序列号标准。它的用途广泛，用于配置文件，日志文件，跨语言数据共享，对象持久化，复杂的数据结构。</p><p><strong>二、yaml有什么特性，为什么使用yaml？</strong><br>1、易于阅读；使用缩进，冒号（：），破折号（-）等人易于理解方式显示复杂的数据结构。</p><p>2、YAML数据在语言之间可以移植的。</p><p>3、符合敏捷语言的数据结构。</p><p>4、支持一次性操作。</p><p>5、具有表现力和可扩展性。</p><p>6、易于实现和使用</p><p><strong>三、YAML与JSON</strong><br>形同点：</p><p>1、YAML和JSON都是便于人阅读的数据交换格式。</p><p>不同点：</p><p>1、JSON设计主要在于简单和通用。YAML设计主要在于易于阅读和支持任何复杂的数据结构。</p><p>2、YAML可以视为JSON的超集，提供更易于阅读和复杂的信息模型。</p><p>3、每个JSON文件都是一个YAML文件，从JSON到YAML迁移是很容易的事情。</p><p><strong>四、YAML与XML</strong><br>YAML主要是数据序列号语言。XXML设计是对SGML的向后兼容。XML有设计约束，而YAML没有。</p><h2 id="两种配置方式的比较"><a href="#两种配置方式的比较" class="headerlink" title="两种配置方式的比较"></a>两种配置方式的比较</h2><p>1.properties配置多环境，需要添加多个配置文件，YAML只需要一个配置文件<br>2.书写格式的差异，yaml相对比较简洁，优雅<br>3.yaml的缺点：不能通过@PropertySource注解加载。如果需要使用@PropertySource注解的方式加载值，那就要使用properties文件</p><p><strong>如何使用</strong><br><code>java -jar demo-1.jar --spring.profiles.active=dev</code></p><h1 id="日志配置logback和log4j2"><a href="#日志配置logback和log4j2" class="headerlink" title="日志配置logback和log4j2"></a>日志配置logback和log4j2</h1><p>支持日志框架：Java Util Logging, Log4j2 and Logback，默认使用logback<br>配置方式：默认配置文件配置和引用外部配置文件配置</p><h2 id="默认配置文件配置（不建议使用：不够灵活，对log4j2等不够友好"><a href="#默认配置文件配置（不建议使用：不够灵活，对log4j2等不够友好" class="headerlink" title="默认配置文件配置（不建议使用：不够灵活，对log4j2等不够友好"></a>默认配置文件配置（不建议使用：不够灵活，对log4j2等不够友好</h2><p>//日志文件名，比如：roncoo.log，或者是/var/log/roncoo.log<br><code>logging.file=roncoo.log</code><br>//日志级别配置，比如：logging.level.org.springframework=DEBUG<br><code>logging.level.*=info</code><br><code>logging.level.org.springframework=DEBUG</code></p><h2 id="引用外部配置文件"><a href="#引用外部配置文件" class="headerlink" title="引用外部配置文件"></a>引用外部配置文件</h2><p>  <strong>logback配置方式：</strong></p><p>spring boot 默认加载 <code>classpath：logback-spring.xml</code> 或者 <code>classpath:logback-spring.groovy</code></p><p>使用自定义配置文件，配置方式为：<br>logging.config=classpath:logback-roncoo.xml<br>注意：不要使用 <code>logback</code> 这个来命名，否则spring boot将不能完全实例化</p><p>  1.1使用基于spring boot的配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/base.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义配置</strong></p><p>2.1 log4j配置<br>2.2.1 去除logback的依赖包，添加log4j2的依赖包</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用log4j2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2.2 在classpath添加log4j2.xml或者log4j2-spring.xml（spring boot 默认加载）<br>2.3 自定义配置文件</p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>性能比较：log4j2和logback都优于log4j（不推荐使用）<br>配置方式：logback最简洁，spring boot默认，推荐使用</p><h1 id="spring-boot-web应用开发"><a href="#spring-boot-web应用开发" class="headerlink" title="spring boot web应用开发"></a>spring boot web应用开发</h1><p><strong>一、spring boot的web应用开发，是基于spring mvc</strong></p><p><strong>二、Spring boot在spring默认基础上，自动配置添加了以下特性：</strong></p><ol><li>包含了ContentNegotiatingViewResolver和BeanNameViewResolver beans。</li><li>对静态资源的支持，包括对WebJars的支持。</li><li>自动注册Converter，GenericConverter，Formatter beans。</li><li>对HttpMessageConverters的支持</li><li>自动注册MessageCodeResolver。</li><li>对静态index.html的支持。</li><li>对自定义Favicon的支持。</li><li>主动使用 ConfigurableWebBindingInitializer bean</li></ol><p><strong><a id="selectMarker">三、模板引擎的选择</a></strong><br>FreeMarker<br>Thymeleaf<br>Velocity（1.4版本之后弃用Spring Framework4.3版本之后弃用）<br>Groovy<br>Mustache<br>注：jsp应该尽量避免使用，原因如下：</p><ol><li>jsp只能打包为war格式，不支持jar格式，只能在标准的容器里面跑（tomcat、jetty都可以）</li><li>内嵌的Jetty目前不支持JSP</li><li>Undertow不支持jsp</li><li>jsp自定义错误页面不能覆盖spring boot默认的错误页面</li></ol><p><strong>springboot不同的版本下，模板引擎下可能引用了SpringBoot-start-web依赖，目前下面示例的2.0.2需要单独引用web依赖</strong></p><p><strong>四、FreeMarker Demo</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>五、Thymeleaf Demo</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>六、JSP Demo</strong></p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模板引擎FreeMarker"><a href="#模板引擎FreeMarker" class="headerlink" title="模板引擎FreeMarker"></a>模板引擎FreeMarker</h2><p>创建一个FreeMarker模板引擎项目，具体步骤如下：<br>  1.创建项目的时候，选择下图中的三项</p><p><img src="./images/1528593840947.jpg" alt="enter description here" title="1528593840947.jpg"></p><p>  2.控制层代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/web"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这里是WebController..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"fremarker测试成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意，不要在最前面加上/，linux下面会出错</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>项目的静态文件和模板存放位置，如下图</li></ol><p><img src="./images/1528593991474.jpg" alt="enter description here" title="1528593991474.jpg"><br>FreeMarker默认将静态文件存放在resources目录下的static目录，模板文件默认存放templates目录下</p><p>  4.FreeMarker模板文件默认后缀名为.ftl<br>  5.html文件示例代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Spring Boot Demo - FreeMarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/index.css<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>${title}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/webjars/jquery/3.3.1-1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        $(function(){            $('#title').click(function(){                alert("点击了");            });        });    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  6.pom.xml文件中引入jquery，如下</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  7.测试结果，如下图</p><p><img src="./images/1528595985014.jpg" alt="enter description here" title="1528595985014.jpg"></p><h2 id="模板引擎Thymeleaf"><a href="#模板引擎Thymeleaf" class="headerlink" title="模板引擎Thymeleaf"></a>模板引擎Thymeleaf</h2><p>此处只介绍模板引擎Thymeleaf项目的基本创建和使用</p><p>  1.创建Thymeleaf项目，如下图</p><p><img src="./images/1528598205973.jpg" alt="enter description here" title="1528598205973.jpg"></p><p>  2.Controller代码，如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/web"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这里是WebController..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"thymeleaf测试成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意，不要在最前面加上/，linux下面会出错</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  3.资源目录如下</p><p><img src="./images/1528598283257.jpg" alt="enter description here" title="1528598283257.jpg"></p><p>  4.模板文件默认为html，示例index.html代码如下</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Spring Boot Demo - FreeMarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/index.css<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${title}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/webjars/jquery/3.3.1-1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        $(function(){            $('#title').click(function(){                alert("点击了...");            });        });    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  5.引用jquery</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  6.测试</p><p><img src="./images/1528598427691.jpg" alt="enter description here" title="1528598427691.jpg"></p><h2 id="模板殷勤jsp"><a href="#模板殷勤jsp" class="headerlink" title="模板殷勤jsp"></a>模板殷勤jsp</h2><p>  spring boot是不建议使用jsp的，详情见上面的<a href="#selectMarker">模板引擎选择</a><br>  具体创建步骤如下<br>  1.创建项目，如下图</p><p><img src="./images/1528600633925.jpg" alt="enter description here" title="1528600633925.jpg"></p><p><img src="./images/1528600652085.jpg" alt="enter description here" title="1528600652085.jpg"><br>创建完成后，项目结构如下</p><p><img src="./images/1528600758280.jpg" alt="enter description here" title="1528600758280.jpg"></p><p><strong>ServletInitializer.java的作用和web.xml作用一样，是启动项目的入口，此适用于web3.0及其以上的规范，web2.0规范的还是需要web.xml作为web项目启动的入口</strong></p><p>  2.pom.xml中引入jsp相关jar包，如下图</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- jsp解析 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- jstl支持 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  3.controller示例代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/web"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这里是WebController..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"jsp测试成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意，不要在最前面加上/，linux下面会出错</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 4.在webapp目录下，创建WEB-INF/templates目录，在新建的目录下，创建index.jsp，如下图</p><p><img src="./images/1528601015525.jpg" alt="enter description here" title="1528601015525.jpg"></p><p>  5.application.properties做如下配置</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value">/WEB-INF/templates/</span><span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.jsp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  6.引入静态资源文件，如下图</p><p><img src="./images/1528601133950.jpg" alt="enter description here" title="1528601133950.jpg"></p><p>  7.启动测试项目</p><p><img src="./images/1528601166331.jpg" alt="enter description here" title="1528601166331.jpg"></p><p> 8.打成war包，本地启动</p><p><img src="./images/1528601235326.jpg" alt="enter description here" title="1528601235326.jpg"></p><p><img src="./images/1528601475645.jpg" alt="enter description here" title="1528601475645.jpg"></p><p><img src="./images/1528601531332.jpg" alt="enter description here" title="1528601531332.jpg"></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>一、错误的处理</p><p><strong>方法一：Spring Boot将所有的错误默认隐射到/error，实现ErrorController</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTestController</span> <span class="token keyword">implements</span> <span class="token class-name">ErrorController</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ErrorTestController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getErrorPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"出错啦！进入自定义出错容器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"error/error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span>    <span class="token keyword">public</span> String <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getErrorPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加异常页面</p><p><img src="./images/1528604612436.jpg" alt="enter description here" title="1528604612436.jpg"></p><p>运行并试结果</p><p><img src="./images/1528604678638.jpg" alt="enter description here" title="1528604678638.jpg"></p><p><strong>方法二：添加自定义的错误页面</strong><br>2.1 html静态页面：在/resources/public/error/下定义<br>    如添加404页面：resources/public/error/404.html页面，中文注意页面编码<br>2.2 模板引擎页面：在templates/error下定义<br>如添加5xx页面：templates/error/5xx.ftl</p><p><strong>注：templates/error/ 这个的优先级比较 resources/pubilc/error/ 高</strong></p><p>步骤如下</p><ol><li>删除ErrorTestController.java</li><li>html静态页面：在/resources/public/error/下定义<br>如添加404页面：resources/public/error/404.html页面，中文注意页面编码</li><li><p>模板引擎页面：在templates/error下定义<br>如添加5xx页面：templates/error/5xx.ftl</p></li><li><p>测试404，如下图</p></li></ol><p><img src="./images/1528609469846.jpg" alt="enter description here" title="1528609469846.jpg"></p><p>测试error，如请求一下controller中的test</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/web"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这里是WebController..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"fremarker测试成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意，不要在最前面加上/，linux下面会出错</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这里是error test..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"测试异常！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./images/1528609550935.jpg" alt="enter description here" title="1528609550935.jpg"></p><p><strong>方法三：使用注解@ControllerAdvice</strong></p><ol><li>创建异常处理类，示例代码如下</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>error<span class="token punctuation">.</span>handler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpStatus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseStatus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义异常 * @author 16694 * */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BizException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>BizException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 统一异常处理     * @param exception     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>RuntimeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">processException</span><span class="token punctuation">(</span>RuntimeException exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"自定义异常处理-RuntimeException..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"roncooException"</span><span class="token punctuation">,</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error/500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 统一异常处理     * @param exception     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">processException</span><span class="token punctuation">(</span>Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"自定义异常处理-Exception..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"roncooException"</span><span class="token punctuation">,</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error/500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建500.html页面，500.html页面示例代码</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Spring Boot Demo - error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>error-系统错误，请联系后台管理员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    错误信息：${roncooException}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>启动 测试</li></ol><p><img src="./images/1528610543428.jpg" alt="enter description here" title="1528610543428.jpg"></p><p><img src="./images/1528610566530.jpg" alt="enter description here" title="1528610566530.jpg"></p><h2 id="Servlet、Filters、Listeners"><a href="#Servlet、Filters、Listeners" class="headerlink" title="Servlet、Filters、Listeners"></a>Servlet、Filters、Listeners</h2><p><strong>一、Web开发使用 Controller 基本上可以完成大部分需求，但是我们还可能需要用到servlet、filter、listener等等</strong></p><p><strong>二、在spring boot中的三种实现方式</strong><br>  方法一、通过注册ServletRegistrationBean、FilterRegistrationBean和ServletListenerRegistrationBean获得控制</p><p>  <strong>1.servlet</strong></p><p>如下图，创建测试servlet</p><p><img src="./images/1528616944793.jpg" alt="enter description here" title="1528616944793.jpg"></p><p>代码如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义servlet * @author 16694 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *      */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet get method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet post method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"servlet test..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类中，注入servlet bean，代码如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CustomFileter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>CustomServlet<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo62ServletFilterListernerApplication</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">servletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/roncoo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Demo62ServletFilterListernerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试</p><p><img src="./images/1528617009874.jpg" alt="enter description here" title="1528617009874.jpg"></p><p><img src="./images/1528617039019.jpg" alt="enter description here" title="1528617039019.jpg"></p><p>  <strong>2.filter</strong><br>  自定义filter代码如下</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义filter * @author 16694 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFileter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init filter..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doFilter filter..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy filter..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类注入filter bean代码</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">filterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        return new FilterRegistrationBean(new CustomFileter(),servletRegistrationBean());     //只拦截servletRegistrationBean</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomFileter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//拦截全部</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 测试</p><p><img src="./images/1528617794183.jpg" alt="enter description here" title="1528617794183.jpg"></p><p><img src="./images/1528617895900.jpg" alt="enter description here" title="1528617895900.jpg"></p><p><img src="./images/1528617919259.jpg" alt="enter description here" title="1528617919259.jpg"></p><p><strong>3.listener</strong><br>创建CustomListener，代码如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>listerner<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextEvent<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义 listener * @author 16694 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contextInitialized..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contextDestroyed..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类注册listener bean，代码如下</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletListenerRegistrationBean <span class="token function">servletListenerRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span>     <span class="token class-name">CustomListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册servlet、filter和listener的另一种方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EnumSet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherType<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextInitializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletListenerRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CustomFileter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>listerner<span class="token punctuation">.</span>CustomListener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>CustomServlet<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//public class Demo62ServletFilterListernerApplication{</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo62ServletFilterListernerApplication</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextInitializer</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*    @Bean    public ServletRegistrationBean servletRegistrationBean() {        return new ServletRegistrationBean(new CustomServlet(),"/roncoo");    }    @Bean    public FilterRegistrationBean filterRegistrationBean() {//        return new FilterRegistrationBean(new CustomFileter(),servletRegistrationBean());     //只拦截servletRegistrationBean        return new FilterRegistrationBean(new CustomFileter());                        //拦截全部    }    @Bean    public ServletListenerRegistrationBean servletListenerRegistrationBean() {        return new ServletListenerRegistrationBean(new     CustomListener());    }    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Demo62ServletFilterListernerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">"customServlet"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CustomServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/roncoo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处路径少了“/”，启动会报错</span>        servletContext<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token string">"customFileter"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CustomFileter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addMappingForServletNames</span><span class="token punctuation">(</span>EnumSet<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>DispatcherType<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"customFileter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拦截指定bean</span><span class="token comment" spellcheck="true">//        servletContext.addFilter("customFileter", new CustomFileter()).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true);//拦截所有</span>        servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要代码如下</p><p><img src="./images/1528619231086.jpg" alt="enter description here" title="1528619231086.jpg"></p><p><strong>方法三、在SpringBootApplication 上使用 @ServletComponentScan 注解后，直接通过@WebServlet、@WebFilter、@WebListener注解自动注册，推荐第三种方法</strong></p><p>启动类代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EnumSet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherType<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextInitializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletListenerRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CustomFileter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>listerner<span class="token punctuation">.</span>CustomListener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>CustomServlet<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token comment" spellcheck="true">//public class Demo62ServletFilterListernerApplication{</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo62ServletFilterListernerApplication</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//public class Demo62ServletFilterListernerApplication implements ServletContextInitializer{</span><span class="token comment" spellcheck="true">/*    @Bean    public ServletRegistrationBean servletRegistrationBean() {        return new ServletRegistrationBean(new CustomServlet(),"/roncoo");    }    @Bean    public FilterRegistrationBean filterRegistrationBean() {//        return new FilterRegistrationBean(new CustomFileter(),servletRegistrationBean());     //只拦截servletRegistrationBean        return new FilterRegistrationBean(new CustomFileter());                        //拦截全部    }    @Bean    public ServletListenerRegistrationBean servletListenerRegistrationBean() {        return new ServletListenerRegistrationBean(new     CustomListener());    }    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Demo62ServletFilterListernerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*@Override    public void onStartup(ServletContext servletContext) throws ServletException {        servletContext.addServlet("customServlet", new CustomServlet()).addMapping("/roncoo");//此处路径少了“/”，启动会报错        servletContext.addFilter("customFileter", new CustomFileter()).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true,"customFileter");//拦截指定bean//        servletContext.addFilter("customFileter", new CustomFileter()).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true);//拦截所有        servletContext.addListener(new CustomListener());    }*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>servlet代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义servlet * @author 16694 * */</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns<span class="token operator">=</span><span class="token string">"/roncoo"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"customServlet"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//此处路径少了“/”，启动会报错</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *      */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet get method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet post method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"servlet test..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>filter代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义filter * @author 16694 * */</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns<span class="token operator">=</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//拦截全部</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFileter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init filter..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doFilter filter..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy filter..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>listener代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cht<span class="token punctuation">.</span>servletFilterListenter<span class="token punctuation">.</span>util<span class="token punctuation">.</span>listerner<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextEvent<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextListener<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebListener<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义 listener * @author 16694 * */</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contextInitialized..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contextDestroyed..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试</p><p><img src="./images/1528619856346.jpg" alt="enter description here" title="1528619856346.jpg"></p><h2 id="CORS支持"><a href="#CORS支持" class="headerlink" title="CORS支持"></a>CORS支持</h2><p><strong>一、Web开发经常会遇到跨域问题，解决方案有：jsonp，iframe，CORS等等</strong><br>CORS和JSONP相比</p><ol><li>JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。</li><li>使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获取数据，比起JSONP有更好的错误处理。</li><li>JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝多数现代浏览器都已经支持了CORS</li></ol><p>浏览器支持情况<br>Chrom 3+<br>Pirefox 3.5+<br>Opera 12+<br>Safari 4+<br>Internet Explorer 8+</p><p><strong>二、在spring MVC中可以配置全局规则，也可以使用@CrossOrigin注解进行细粒度的配置。</strong></p><p><strong><em>全局配置</em></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomCorsConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> WebMvcConfigurer <span class="token function">corsConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//http://localhost:8080下的api下的所有请求都允许跨域</span>                registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><em>局部跨域配置</em></strong><br>定义方法啊</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins<span class="token operator">=</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"跨域"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试js</p><pre class="line-numbers language-javascript"><code class="language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//alert("点击了");</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token punctuation">:</span><span class="token string">"http://localhost:8081/api/get"</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>                    data<span class="token punctuation">:</span><span class="token punctuation">{</span>                        name<span class="token punctuation">:</span><span class="token string">"测试"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>status<span class="token punctuation">,</span>xhr<span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试效果</p><p><img src="./images/1528630779859.jpg" alt="enter description here" title="1528630779859.jpg"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>一、Spring Boot 默认使用spring MVC包装好的解析器进行上传</p><p>二、添加代码</p><p>js</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>form method<span class="token operator">=</span><span class="token string">"POST"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span> action<span class="token operator">=</span><span class="token string">"/file/upload"</span><span class="token operator">></span>    文件：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"roncooFile"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"上传"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FileController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"roncooFile"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"文件为空"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取文件名</span>        String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"上传的文件名为："</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件后缀名</span>        String suffixName <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件上传路径</span>        String filePath <span class="token operator">=</span> <span class="token string">"d:/roncoo/education/"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解决中文问题，linux下中文路径，图片显示有问题</span><span class="token comment" spellcheck="true">//        fileName = UUID.randomUUID() + suffixName;</span>        File dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//检测目录是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dest<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dest<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//spring封装的方法上传</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"上传成功！"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"上传失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><p><img src="./images/1528637118379.jpg" alt="enter description here" title="1528637118379.jpg"></p><p><strong>三、配置</strong></p><p>当上传的文件过大时，会报如下错误</p><pre class="line-numbers language-java"><code class="language-java">Resolved exception caused by Handler execution<span class="token operator">:</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MaxUploadSizeExceededException<span class="token operator">:</span> Maximum upload size exceeded<span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>http<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>FileUploadBase$SizeLimitExceededException<span class="token operator">:</span> the request was rejected because its <span class="token function">size</span> <span class="token punctuation">(</span><span class="token number">20992233</span><span class="token punctuation">)</span> exceeds the configured <span class="token function">maximum</span> <span class="token punctuation">(</span><span class="token number">10485760</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>spring boot 提供如下上传文件配置</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># MULTIPART (MultipartProperties) </span><span class="token comment" spellcheck="true"># Whether to enable support of multipart uploads.默认支持上传</span><span class="token attr-name">spring.servlet.multipart.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true </span><span class="token comment" spellcheck="true"># Threshold after which files are written to disk. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.#支持文件写入磁盘</span><span class="token attr-name">spring.servlet.multipart.file-size-threshold</span><span class="token punctuation">=</span><span class="token attr-value">0 </span><span class="token comment" spellcheck="true"># Intermediate location of uploaded files.上传文件的临时目录(linux系统下配置成如：“/temp”，windows下配置成如：“D:/temp”)</span><span class="token attr-name">spring.servlet.multipart.location</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Max file size. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.最大支持文件大小</span><span class="token attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token attr-value">5MB </span><span class="token comment" spellcheck="true"># Max request size. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.最大支持请求大小</span><span class="token attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token attr-value">10MB </span><span class="token comment" spellcheck="true"># Whether to resolve the multipart request lazily at the time of file or parameter access.</span><span class="token attr-name">spring.servlet.multipart.resolve-lazily</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="使用关系型数据库-JdbcTemplate"><a href="#使用关系型数据库-JdbcTemplate" class="headerlink" title="使用关系型数据库-JdbcTemplate"></a>使用关系型数据库-JdbcTemplate</h2><p>一、配置数据源<br>嵌入式数据库的支持：Spring Boot 可以自动配置 H2，HSQL and Derby 数据库，不需要提供任何的链接URL，只需要加入相应的 jar 包，Spring Boot 可以自动发现装配</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- 数据库 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql 配置</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#mysql配置</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost/study</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：</strong><br>  <strong>1. 可以不指定driver-class-name，spring boot会自动识别url。</strong><br>  <strong>2. 数据连接池默认使用tomcat-jdbc</strong></p><p>  <strong>连接池配置：spring.datasource.tomcat.*</strong></p><p>二、JdbcTemplate模板<br>//自动注册<br>@Autowired<br>private JdbcTemplate jdbcTemplate;</p><p>三、 脚本</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'注释'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>height<span class="token punctuation">`</span> <span class="token keyword">double</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'身高'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">date</span><span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'生日'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 COMMNET<span class="token operator">=</span><span class="token string">'用户表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四、实体类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 实体类*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoncooUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用关系型数据库-Spring-data-jpa"><a href="#使用关系型数据库-Spring-data-jpa" class="headerlink" title="使用关系型数据库-Spring-data-jpa"></a>使用关系型数据库-Spring-data-jpa</h2><h2 id="使用关系型数据库-事务处理"><a href="#使用关系型数据库-事务处理" class="headerlink" title="使用关系型数据库-事务处理"></a>使用关系型数据库-事务处理</h2><h2 id="使用关系型数据库-h2嵌入式数据库的使用"><a href="#使用关系型数据库-h2嵌入式数据库的使用" class="headerlink" title="使用关系型数据库-h2嵌入式数据库的使用"></a>使用关系型数据库-h2嵌入式数据库的使用</h2><h2 id="使用NoSql数据库-redis"><a href="#使用NoSql数据库-redis" class="headerlink" title="使用NoSql数据库-redis"></a>使用NoSql数据库-redis</h2><h2 id="使用NoSql数据库-Mongodb"><a href="#使用NoSql数据库-Mongodb" class="headerlink" title="使用NoSql数据库-Mongodb"></a>使用NoSql数据库-Mongodb</h2><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h2><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h1 id="异步消息服务"><a href="#异步消息服务" class="headerlink" title="异步消息服务"></a>异步消息服务</h1><h2 id="JMS（ActiveMQ）"><a href="#JMS（ActiveMQ）" class="headerlink" title="JMS（ActiveMQ）"></a>JMS（ActiveMQ）</h2><h2 id="AMQP（RabbitMQ）"><a href="#AMQP（RabbitMQ）" class="headerlink" title="AMQP（RabbitMQ）"></a>AMQP（RabbitMQ）</h2><h1 id="调用REST服务，如何使用代理"><a href="#调用REST服务，如何使用代理" class="headerlink" title="调用REST服务，如何使用代理"></a>调用REST服务，如何使用代理</h1><h1 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h1><h1 id="使用spring-session实现集群redis"><a href="#使用spring-session实现集群redis" class="headerlink" title="使用spring-session实现集群redis"></a>使用spring-session实现集群redis</h1><h1 id="远程调优"><a href="#远程调优" class="headerlink" title="远程调优"></a>远程调优</h1><h1 id="基于HTTP的监控"><a href="#基于HTTP的监控" class="headerlink" title="基于HTTP的监控"></a>基于HTTP的监控</h1><h1 id="spring-boot集成"><a href="#spring-boot集成" class="headerlink" title="spring boot集成"></a>spring boot集成</h1><h2 id="集成Mybatis"><a href="#集成Mybatis" class="headerlink" title="集成Mybatis"></a>集成Mybatis</h2><h2 id="集成Druid"><a href="#集成Druid" class="headerlink" title="集成Druid"></a>集成Druid</h2><h2 id="集成Swagger"><a href="#集成Swagger" class="headerlink" title="集成Swagger"></a>集成Swagger</h2><h1 id="生产部署"><a href="#生产部署" class="headerlink" title="生产部署"></a>生产部署</h1>]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring+mybatis+mysql5.7实现读写分离，主从复制</title>
      <link href="/2018/05/28/spring+mybatis+mysql5.7%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%EF%BC%8C%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2018/05/28/spring+mybatis+mysql5.7%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%EF%BC%8C%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      <content type="html"><![CDATA[<hr><p>申明：请尽量与我本博文所有的软件版本保持一致，避免不必要的错误。</p><p>所用软件版本列表：<br>MySQL 5.7<br>spring5<br>mybaties3.4.6</p><hr><p>首先搭建一个完整的spring5+springMVC5+Mybatis3.4的完整框架，如果嫌麻烦，可以直接去我github上下载完整测试代码，代码地址 <a href="https://github.com/hlmk/project/tree/master/studyProject/read_and_write_separate" target="_blank" rel="noopener">https://github.com/hlmk/project/tree/master/studyProject/read_and_write_separate</a></p><h1 id="数据库读写分离简介"><a href="#数据库读写分离简介" class="headerlink" title="数据库读写分离简介"></a>数据库读写分离简介</h1><p>Mysql中，当数据和并发量到达一定的级别时，单库的处理能力显得力不从心，TPS/OPS 越来越低，因此到了这个阶段，DBA会将数据库设置为读写分离状态（生产环境一般会采用一主一从或者一主多从），由Master负责写操作，而Slave作为备库，不会开放写操作，但可以允许读操作，主从之间保持数据同步即可。根据二八法则，80%的数据库操作是读操作，剩下的20%是写操作，读写分离后，可以大大提升单库无法支撑的负载压力，如图5-1所示。在此需要注意，如果Master存在TPS较高的情况，Master与Slave数据库之间数据同步是会存在一定延迟的，因此在写入Master之前最好将同一份数据落到缓存中，以避免高并发的情况下，从Slave中获取不到指定数据的情况。<br><img src="/images/readWriteSeparate/1527504083104.jpg" alt="enter description here" title="1527504083104.jpg"></p><h1 id="mybatis配置读写分离"><a href="#mybatis配置读写分离" class="headerlink" title="mybatis配置读写分离"></a>mybatis配置读写分离</h1><p>配置文件主要是修改Mybatis相关的配置文件即可，原理就是通过springAOP切面和Mybatis插件结合，为service层调用的dao层根据方法名来选择是读数据库还是写数据库，具体配置如下：<br>Mybatis.xml配置</p><p>写数据源配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>writeDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 基本属性 url、user、password,druid --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>写数据库连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.driver}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.writer.url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.writer.username}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.writer.password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置初始化大小、最小、最大 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.writer.initialSize}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.writer.maxIdle}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.writer.maxActive}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置获取连接等待超时的时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.writer.maxWait}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.timeBetweenEvictionRunsMillis}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.minEvictableIdleTimeMillis}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validationQuery<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SELECT <span class="token punctuation">'</span>x<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolPreparedStatementPerConnectionSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打开Druid的监控统计功能 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slf4j<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyFilters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat-filter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenLogStatsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读数据源配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>readDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 基本属性 url、user、password,druid --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>只读数据库连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.driver}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.reader.url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.reader.username}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.reader.password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置初始化大小、最小、最大 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.reader.initialSize}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.reader.maxIdle}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.reader.maxActive}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置获取连接等待超时的时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.reader.maxWait}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.timeBetweenEvictionRunsMillis}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.minEvictableIdleTimeMillis}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validationQuery<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SELECT <span class="token punctuation">'</span>x<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolPreparedStatementPerConnectionSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打开Druid的监控统计功能 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slf4j<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxyFilters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat-filter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenLogStatsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据源配置</p><pre class="line-numbers language-xml"><code class="language-xml">     <span class="token comment" spellcheck="true">&lt;!--注意这里的配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cht.integration.aspect.ChooseDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>数据源<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>targetDataSources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">key-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javax.sql.DataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- write --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>writeDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- read --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>readDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultTargetDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>writeDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>methodType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">key-type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- read --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,get,select,count,list,query,<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- write --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>write<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,add,insert,create,update,delete,remove,<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据源切面配置</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 注意这个切面 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DataSourceAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.cht.integration.aspect.DataSourceAspect<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取数据源代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 获取数据源 * * @author * @version */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChooseDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> METHODTYPE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取数据源名称</span>    <span class="token keyword">protected</span> Object <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> HandleDataSource<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置方法名前缀对应的数据源</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMethodType</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            METHODTYPE<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AOP切换数据源配置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 切换数据源(不同方法调用不同数据源) * * @author * @version */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DataSourceAspect<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置切入点</span>   <span class="token comment" spellcheck="true">// @Pointcut("execution(* com.zhx.service..*.*(..))")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置前置通知,使用在方法aspect()上注册的切入点     */</span>   <span class="token comment" spellcheck="true">// @Before("com.cht.integration.aspect()")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint point<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String className <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String method <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>className <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            L<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> ChooseDataSource<span class="token punctuation">.</span>METHODTYPE<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String type <span class="token operator">:</span> ChooseDataSource<span class="token punctuation">.</span>METHODTYPE<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                        HandleDataSource<span class="token punctuation">.</span><span class="token function">putDataSource</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span> L<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            HandleDataSource<span class="token punctuation">.</span><span class="token function">putDataSource</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// @After("com.cht.integration.aspect()")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HandleDataSource<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><h2 id="主数据库配置"><a href="#主数据库配置" class="headerlink" title="主数据库配置"></a>主数据库配置</h2><p><strong>注意：务必保持主从数据库是同一个版本的数据库，否则容易出现兼容问题。</strong><br>从数据库，一般用于存储，具体配置步骤如下：<br>1.找到my.ini目录所在位置，默认如下：<br><img src="/images/readWriteSeparate/1527602818775.jpg" alt="enter description here" title="1527602818775.jpg"></p><p>2.修改对应的配置。</p><pre><code>//server-id 必须保证唯一，不能重复。server-id=1//指定二进制日志文件的存储路径和名称log-bin=mysql-bin</code></pre><p>重启mysql主服务</p><p>查看主服务器master信息 <code>show master status</code><br><img src="/images/readWriteSeparate/1527603433502.jpg" alt="enter description here" title="1527603433502.jpg"></p><h2 id="从服务器配置"><a href="#从服务器配置" class="headerlink" title="从服务器配置"></a>从服务器配置</h2><p>1.找到my.ini目录所在位置，默认如下：<br><img src="/images/readWriteSeparate/1527602818775.jpg" alt="enter description here" title="1527602818775.jpg"><br>2.修改从服务器配置，如下：</p><pre><code>server-id=2log-bin=mysql-binrelay_log=mysql-relay-binlog_slave_updates=1read_only=1</code></pre><p>3.重启从服务器服务<br>4.如果之前设置过从服务器配置，需要先 <code>reset slave;</code> ，否则跳过这一步<br>5.指定从服务器的主服务器</p><pre class="line-numbers language-sql"><code class="language-sql">change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'192.168.159.128'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--指定主服务器的IP地址</span>master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--指定主服务器的端口</span>master_use<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--指定主服务器的操作用户</span>master_password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--指定主服务器的密码</span>master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000003'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--指定要同步主服务器的日志文件</span>master_log_pos<span class="token operator">=</span><span class="token string">'154'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--指定要同步的节点，和show master status 中的 position值保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.启动从服务器配置 <code>start slave;</code></p><p>7.<code>show slave status\G;</code> 查看从服务状态<br><img src="/images/readWriteSeparate/1527604404149.jpg" alt="enter description here" title="1527604404149.jpg"><br>图上标志的两个都为yes时，则标示配置成功</p><h1 id="测试是否同步"><a href="#测试是否同步" class="headerlink" title="测试是否同步"></a>测试是否同步</h1><p>修改主服务器的数据，会发现数据同步到从服务器中，我这里是测试成功的，具体的就不截图了，如果没同步成功，那么请检查是否主从服务器版本是否为同一个版本，然后在检查配置是否写错，主从同步延时那个就参考其他资料了，这就先介绍到这里。</p><p>参考博客：<a href="https://blog.csdn.net/juded/article/details/54600294" target="_blank" rel="noopener">https://blog.csdn.net/juded/article/details/54600294</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>spring+redis实现redissession共享</title>
      <link href="/2018/05/27/spring+redis%E5%AE%9E%E7%8E%B0redissession%E5%85%B1%E4%BA%AB/"/>
      <url>/2018/05/27/spring+redis%E5%AE%9E%E7%8E%B0redissession%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h1><h2 id="配置SpringMVC"><a href="#配置SpringMVC" class="headerlink" title="配置SpringMVC"></a>配置SpringMVC</h2><p>spring-mvc.xml</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--将session放入redis--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redisHttpSessionConfiguration<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--初始化cookie信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cookieSerializer<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cookieSerializer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--session过期时间--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxInactiveIntervalInSeconds<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义cookie session名称--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cookieSerializer<span class="token punctuation">"</span></span>   <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.session.web.http.DefaultCookieSerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cookieName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SESSION<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置redis连接池--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.clients.jedis.JedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--允许开启的最大连接数--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxTotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--最大空闲连接数--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--jedis连接工厂配置        destroy-method : 容器销毁之前执行的方法    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisConnectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.connection.jedis.JedisConnectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.host}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.port}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pass}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>usePool<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web-xml添加拦截器"><a href="#web-xml添加拦截器" class="headerlink" title="web.xml添加拦截器"></a>web.xml添加拦截器</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--添加redis session拦截器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>springSessionRepositoryFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>springSessionRepositoryFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用spring-session"><a href="#使用spring-session" class="headerlink" title="使用spring-session"></a>使用spring-session</h1><p>只要使用标准的servlet api调用session，在底层就会通过Spring Session得到的，并且会存储到Redis或其他你所选择的数据源中。</p><p>这里是我写的一个demo:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSession</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> String username<span class="token punctuation">)</span><span class="token punctuation">{</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><strong>首先访问 <code>http://localhost:8080/login?username=%E5%BC%A0%E4%B8%89</code> 来触发生成session。</strong><br><img src="/images/redisSession/1527389828788.jpg" alt="enter description here" title="1527389828788.jpg"></p><p><strong>查看redis，发现session已经保存到redis。</strong><br><img src="/images/redisSession/1527389317833.jpg" alt="enter description here" title="1527389317833.jpg"></p><p><strong>访问 <code>http://localhost:8080/index</code> 获取redis中sessiion信息</strong><br><img src="/images/redisSession/1527389648332.jpg" alt="enter description here" title="1527389648332.jpg"></p><p><strong>访问第二个启动实例 <code>http://localhost:8081/index</code> 回去redis中session信息</strong><br><img src="/images/redisSession/1527389695362.jpg" alt="enter description here" title="1527389695362.jpg"></p><p><strong>至此发现两个启动实例中，都可以访问到redis中的session信息，说明，测试成功。</strong></p><hr><p>项目地址：<a href="https://github.com/hlmk/project/tree/master/studyProject/spring_redis_session" target="_blank" rel="noopener">https://github.com/hlmk/project/tree/master/studyProject/spring_redis_session</a></p><p>可以在浏览器装 Octotree 插件更好的浏览github代码<br><img src="/images/redisSession/1527383267873.jpg" alt="enter description here" title="1527383267873.jpg"><br>效果如下图<br><img src="/images/redisSession/1527383323053.jpg" alt="enter description here" title="1527383323053.jpg"></p><p>参考博客：<a href="https://www.cnblogs.com/andyfengzp/p/6434287.html" target="_blank" rel="noopener">https://www.cnblogs.com/andyfengzp/p/6434287.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>SpringBoot2面试题整理</title>
      <link href="/2018/05/23/SpringBoot2%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2018/05/23/SpringBoot2%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p><strong>什么是springboot</strong><br>        用来简化spring应用的初始搭建以及开发过程 使用特定的方式来进行配置（properties或yml文件）<br>                创建独立的spring引用程序 main方法运行<br>                嵌入的Tomcat 无需部署war文件<br>                简化maven配置<br>                自动配置spring添加对应功能starter自动化配置</p><p><strong>springboot常用的starter有哪些</strong><br>        spring-boot-starter-web 嵌入tomcat和web开发需要servlet与jsp支持<br>        spring-boot-starter-data-jpa 数据库支持<br>        spring-boot-starter-data-redis redis数据库支持<br>        spring-boot-starter-data-solr solr支持<br>        mybatis-spring-boot-starter 第三方的mybatis集成starter</p><p><strong>springboot自动配置的原理</strong><br>        在spring程序main方法中 添加@SpringBootApplication或者@EnableAutoConfiguration<br>        会自动去maven中读取每个starter中的spring.factories文件  该文件里配置了所有需要被创建spring容器中的bean</p><p><strong>springboot读取配置文件的方式</strong><br>        springboot默认读取配置文件为application.properties或者是application.yml</p><p><strong>springboot集成mybatis的过程</strong><br>        添加mybatis的starter maven依赖<br>                <dependency><br>                        <groupid>org.mybatis.spring.boot</groupid><br>                        <artifactid>mybatis-spring-boot-starter</artifactid><br>                        <version>1.2.0</version><br>                </dependency><br>        在mybatis的接口中 添加@Mapper注解<br>        在application.yml配置数据源信息</p><p><strong>springboot如何添加【修改代码】自动重启功能</strong><br>        添加开发者工具集=====spring-boot-devtools</p><p><strong>什么是微服务</strong><br>        以前的模式是 所有的代码在同一个工程中 部署在同一个服务器中 同一个项目的不同模块不同功能互相抢占资源<br>        微服务 将工程根据不同的业务规则拆分成微服务 微服务部署在不同的机器上 服务之间进行相互调用<br>        Java微服务的框架有 dubbo（只能用来做微服务），spring cloud（提供了服务的发现，断路器等）</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>springBoot2 精髓 从构建小系统到架构分布式大系统学习笔记</title>
      <link href="/2018/05/23/springBoot2%20%E7%B2%BE%E9%AB%93%20%E4%BB%8E%E6%9E%84%E5%BB%BA%E5%B0%8F%E7%B3%BB%E7%BB%9F%E5%88%B0%E6%9E%B6%E6%9E%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%A7%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/23/springBoot2%20%E7%B2%BE%E9%AB%93%20%E4%BB%8E%E6%9E%84%E5%BB%BA%E5%B0%8F%E7%B3%BB%E7%BB%9F%E5%88%B0%E6%9E%B6%E6%9E%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%A7%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="Java-EE简介"><a href="#Java-EE简介" class="headerlink" title="Java EE简介"></a>Java EE简介</h1><h2 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h2><p> <strong>JavaEE 介绍</strong><br> 1、  为什么需要JavaEE</p><p>我们编写的JSP代码中，由于大量的显示代码和业务逻辑混淆在一起，彼此嵌套，不利于程序的维护和扩展。当业务需求发生变化的时候，对于程序员和美工都是一个很重的负担。</p><p>为了程序的易维护性和可扩展性，这就需要我们使用JavaEE技术来进行项目开发</p><p>2、  什么是JavaEE</p><p>JavaEE是一个开发分布式企业级应用的规范和标准。</p><p>Java语言的平台有3个版本：适用于小型设备和智能卡的JavaME（Java Platform Micro Edition，Java微型版）、适用于桌面系统的JavaSE（Java Platform Micro Edition，Java标准版）、适用于企业应用的JavaEE（Java Platform Enterprise Edition，Java企业版）。</p><p>3、  JavaEE包括的技术</p><p>JavaEE应用程序是由组件构成的。J2EE组件是具有独立功能的单元，他们通过相关的类和文件组装成JavaEE应用程序，并与其他组件交互。</p><p>JavaEE包括的技术有：Web Service、Struts、Hibernate、Spring、JSP、Servlet、JSF、EJB、JavaBean、JDBC、JNDI、XML、JavaSE。</p><h3 id="JavaEE的组件和规范简介"><a href="#JavaEE的组件和规范简介" class="headerlink" title="JavaEE的组件和规范简介"></a>JavaEE的组件和规范简介</h3><h4 id="JavaEE的组件"><a href="#JavaEE的组件" class="headerlink" title="JavaEE的组件"></a>JavaEE的组件</h4><p>参考博客：<a href="https://blog.csdn.net/lianjiangwei/article/details/50848531" target="_blank" rel="noopener">https://blog.csdn.net/lianjiangwei/article/details/50848531</a></p><p><em>首先，我们得先了解一下这里所说的组件是什么鬼？</em></p><p>百度百科给出的解释是：组件（Component）是对数据和方法的简单封装。组件可以有自己的属性和方法。属性是组件数据的简单访问者。方法则是组件的一些简单而可见的功能。使用组件可以实现拖放式编程、快速的属性处理以及真正的面向对象的设计。</p><p>从上面的描述来看，实际上就是面向对象的思想，或者就是在描述一个类，因为对象或者类就是由属性和方法构成的。而我们的JavaEE应用程序就是由组件构成的，JavaEE组件是具有独立功能的单元，它们通过相关的类和文件进行组装，成为应用程序，并且与其他组件交互。例如：控制器组件、EAO组件，表现层组件等等。下面我们就根据JavaEE的分层模型来说说各层组件的详细情况。</p><p><em>表现层组件：</em></p><p>主要负责收集用户输入数据，或者向客户显示系统状态。最常用的表现层技术是JSP，但JSP并不是唯一的表现层技术。表现层还可以由Velocity、FreeMaker和Tapestry等技术完成，或者使用普通的应用程序充当表现层组件，甚至可以是小型智能设备，比如我们手机、IPad等等。</p><p><em>控制器组件：</em></p><p>对于JavaEE的MVC框架而言，框架提供了一个前端核心控制器，而核心控制器负责拦截用户请求，并将请求转发给用户实现的控制器组件。而这些用户实现的控制器则负责处理调用业务逻辑方法，处理用户请求。</p><p><em>业务逻辑组件：</em></p><p>这些组件是系统的核心组件，实现系统的业务逻辑。通常，一个业务逻辑方法对应一次用户操作。一个业务逻辑方法应该是一个整体的，因此我们要求对业务逻辑方法增加事务性。业务逻辑方法仅仅负责实现业务逻辑，不应该进行数据库访问。因此，业务逻辑组件中不应该出现原始的Hibernate。JDBC等API。</p><p>为什么要将业务逻辑实现与持久层的技术分离呢？一个很重要的原因是：当系统需要在不同的持久层技术之间切换时，系统的业务逻辑组件无须做任何改变。</p><p><em>DAO组件：</em></p><p>Data Access Object，也被称为数据访问对象。这个类型的对象比较缺乏变化，每个DAO组件都提供Domain Object对象基本的创建、查询、更新和删除等操作，这些操作对应于数据表的CRUD等原子操作。当然，如果采用不同的持久层访问技术，DAO组件的实现会完全不同。为了业务逻辑组件的实现与DAO组件的实现分离，我们为每个DAO组件都提供接口，业务逻辑组件面向DAO接口编程，从而提供更好的解耦。</p><p><em>领域对象组件：</em></p><p>领域对象（Domain Object）抽象了系统的对象模型。通常而言，这些领域对象的状态都必须保存在数据库里面。因此，每个领域对象通常对应一个或多个数据表，领域对象通常需要提供对数据记录的访问方式。</p><p>小结一下;</p><p>最后放上一张图，帮助大家更好理解JavaEE应用架构和各种技术之间的关系。</p><p> <img src="./images/1527992095282.jpg" alt="" title="1527992095282.jpg"></p><p>其实很多人都会有这样的疑问：我可以使用JSP完成整个系统，为何还有这么费劲的将系统分这么层？每层使用不同的技术框架？有必要么？</p><p>对于个人学习、娱乐性的个人站点而言，你怎么做都无所谓，但是对于大型的信息化系统来说，你就要好好考虑考虑了，维护性、扩展性、复用性等等都是问题。</p><h4 id="JavaEE规范"><a href="#JavaEE规范" class="headerlink" title="JavaEE规范"></a>JavaEE规范</h4><p>参考博客：<a href="https://blog.csdn.net/zh15732621679/article/details/53966404" target="_blank" rel="noopener">https://blog.csdn.net/zh15732621679/article/details/53966404</a><br>J2EE的13个技术规范：JDBC，JNDI，EJB，RMI，JSP，Servlets，XML，JMS，Java IDL，JTS，JTA，JavaMail，JAF。</p><p>1.JDBC(Java DataBase Connectivity)</p><pre><code>  java数据连接，是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问。有了JDBC就不用因为不同的数据库而要写个不同的应用程序，开发人员只需要使用JDBC API写一个程序就够了。</code></pre><p>2.JNDI(Java Naming and Directory Interface)</p><pre><code>Java命名和目录接口，提供了一种统一的方式可以在网络上查找和访问服务，通过指定一个资源名称，该名称对应于数据库或命名服务中的一个记录，同时返回数据库连接建立所必需的信息。</code></pre><p>   在DataSource中事先建立多个数据库连接，保存在数据库连接池中，当程序访问数据库时，只用从连接池中取空闲状态的数据库连接即可，访问结束，销毁资源，数据库链接重新回到连接池。</p><p>3.EJB(Enterprise JavaBean)</p><pre><code> EJB是sun的JavaEE服务器端组件模型，设计目标与核心应用是部署分布式应用程序。简单来说就是把已经编写好的程序（即：类）打包放在服务器上执行。凭借java跨平台的优势，用EJB技术部署的分布式系统可以不限于特定的平台。包括四种对象类型：无状态会话bean（提供独立服务）,有状态会话bean（提供会话交互），实体bean（持久性数据在内存中的体现，服务器崩溃后可恢复），消息驱动bean。</code></pre><p>4.RMI(Remote Method Invoke)</p><pre><code>远程方法调用，能够让在某个java虚拟机上的对象调用本地对象一样的调用另一个java虚拟机中高的对象上的方法。</code></pre><p>5.JSP(Java Server Pages)</p><p>   java服务器页面，是一个动态内容模板，实现了Html语法中的java扩展。</p><p>6.Servlet</p><p>   Servlet是一种小型的Java程序，它扩展了Web服务器的功能。作为一种服务器端的应用，当被请求时开始执行，这和CGI Perl脚本很相似。Servlet提供的功能大多与JSP类似，不过实现的方式不同。JSP通常是大多数HTML代码中嵌入少量的Java代码，而servlets全部由Java写成并且生成HTML。</p><p>7.XML(Extensible Markup Language)</p><p>   是一种可扩展的标记语言，被用来在不同的商务过程中共享数据，其目标是平台独立性，记得在学习XML的时候，可以自己写标签，只要有结束标签就可以识别，还是相当强大的。</p><p>8.JMS(Java Message Service)</p><p>   是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。消息通信可以是点对点的，也可以是发布订阅型的。</p><p>9.Java IDL</p><p>   Java IDL支持的是一个瞬间的CORBA对象，即在对象服务器处理过程中有效。实际上，Java IDL的ORB是一个类库而已，并不是一个完整的平台软件，但它对Java IDL应用系统和其他CORBA应用系统之间提供了很好的底层通信支持，实现了OMG定义的ORB基本功能。</p><p>10.JTS(object transaction monitor)</p><p>   组件事务监视器，TPM 是一个程序，它代表应用程序协调分布式事务的执行。TPM 与数据库出现的时间长短差不多；在 60 年代后期，IBM 首先开发了 CICS，至今人们仍在使用。经典的（或者说 程序化）TPM 管理被程序化定义为针对事务性资源（比如数据库）的操作序列的事务。随着分布式对象协议，如 CORBA、DCOM 和 RMI 的出现，人们希望看到事务更面向对象的前景。将事务性语义告知面向对象的组件要求对 TPM 模型进行扩展 ― 在这个模型中事务是按照事务性对象的调用方法定义的。JTS 只是一个组件事务监视器（有时也称为 对象事务监视器（object transaction monitor）），或称为 CTM。</p><p>11.JTA(Java Transaction API)</p><pre><code>JTA允许应用程序执行分布式事务处理——在两个或多个网络计算机资源上访问并且更新数据。JDBC驱动程序的JTA支持极大地增强了数据访问能力。</code></pre><p>12.JavaMail</p><pre><code>提供给开发者处理电子邮件相关的编程接口。</code></pre><p>13.JAF(JavaBeans Activation Framework)</p><pre><code>JAF是一个专用的数据处理框架，它用于封装数据，并为应用程序提供访问和操作数据的接口。</code></pre><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><h3 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h3><p>  Spring是为了解决应用复杂性而产生的框架，它吸取了Java EE容器管理的优点，提供了一个IOC容器来管理Bean，并通过AOP方式来增强Bean的功能，不同的是它并没有像Java EE那样详细规定容器提供的是何种服务和容器里运行的具体组件类型。Spring只提供了两种机制，控制反转（IOC）和面向切面（AOP），来提供任意的服务和增强Bean的任意特性，使得Spring本身容易掌握，又可以通过Bean管理来无限扩展功能。</p><h3 id="springBoot热部署方式"><a href="#springBoot热部署方式" class="headerlink" title="springBoot热部署方式"></a>springBoot热部署方式</h3><p>  spring Boot提供了 spring-boot-devtools，它能在修改类或者配置文件的时候自动重新加载spring boot应用，需要打开pom文件，添加如下依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务即可。</p><h1 id="Spring-Boot基础"><a href="#Spring-Boot基础" class="headerlink" title="Spring Boot基础"></a>Spring Boot基础</h1><h2 id="检查Java环境和安装Java"><a href="#检查Java环境和安装Java" class="headerlink" title="检查Java环境和安装Java"></a>检查Java环境和安装Java</h2><h2 id="检查和配置Maven"><a href="#检查和配置Maven" class="headerlink" title="检查和配置Maven"></a>检查和配置Maven</h2><h2 id="Spring核心技术"><a href="#Spring核心技术" class="headerlink" title="Spring核心技术"></a>Spring核心技术</h2><h1 id="MVC框架"><a href="#MVC框架" class="headerlink" title="MVC框架"></a>MVC框架</h1><h2 id="集成MVC框架"><a href="#集成MVC框架" class="headerlink" title="集成MVC框架"></a>集成MVC框架</h2><h2 id="使用Controller"><a href="#使用Controller" class="headerlink" title="使用Controller"></a>使用Controller</h2><h2 id="URL-隐射到方法"><a href="#URL-隐射到方法" class="headerlink" title="URL 隐射到方法"></a>URL 隐射到方法</h2><h2 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h2><h2 id="验证框架"><a href="#验证框架" class="headerlink" title="验证框架"></a>验证框架</h2><h2 id="WebMvcConfigurer"><a href="#WebMvcConfigurer" class="headerlink" title="WebMvcConfigurer"></a>WebMvcConfigurer</h2><h1 id="视图技术"><a href="#视图技术" class="headerlink" title="视图技术"></a>视图技术</h1><h2 id="Beetle模板引擎"><a href="#Beetle模板引擎" class="headerlink" title="Beetle模板引擎"></a>Beetle模板引擎</h2><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><h2 id="格式化函数"><a href="#格式化函数" class="headerlink" title="格式化函数"></a>格式化函数</h2><h2 id="直接调用Java"><a href="#直接调用Java" class="headerlink" title="直接调用Java"></a>直接调用Java</h2><h2 id="标签函数"><a href="#标签函数" class="headerlink" title="标签函数"></a>标签函数</h2><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><h2 id="安全输出"><a href="#安全输出" class="headerlink" title="安全输出"></a>安全输出</h2><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><h2 id="脚本引擎"><a href="#脚本引擎" class="headerlink" title="脚本引擎"></a>脚本引擎</h2><h2 id="JSON技术"><a href="#JSON技术" class="headerlink" title="JSON技术"></a>JSON技术</h2><h2 id="MVC分离开发"><a href="#MVC分离开发" class="headerlink" title="MVC分离开发"></a>MVC分离开发</h2><h1 id="数据库访问"><a href="#数据库访问" class="headerlink" title="数据库访问"></a>数据库访问</h1><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><h2 id="Spring-JDBC-Template"><a href="#Spring-JDBC-Template" class="headerlink" title="Spring JDBC Template"></a>Spring JDBC Template</h2><h2 id="BeetlSQL"><a href="#BeetlSQL" class="headerlink" title="BeetlSQL"></a>BeetlSQL</h2><h2 id="SQLManager内置CRUD"><a href="#SQLManager内置CRUD" class="headerlink" title="SQLManager内置CRUD"></a>SQLManager内置CRUD</h2><h2 id="使用SQLId"><a href="#使用SQLId" class="headerlink" title="使用SQLId"></a>使用SQLId</h2><h2 id="BeetlSQL的其他功能"><a href="#BeetlSQL的其他功能" class="headerlink" title="BeetlSQL的其他功能"></a>BeetlSQL的其他功能</h2><h1 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h1><h2 id="集成Spring-Data-JPA"><a href="#集成Spring-Data-JPA" class="headerlink" title="集成Spring Data JPA"></a>集成Spring Data JPA</h2><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><h1 id="SpringBoot配置"><a href="#SpringBoot配置" class="headerlink" title="SpringBoot配置"></a>SpringBoot配置</h1><h2 id="配置SpringBoot"><a href="#配置SpringBoot" class="headerlink" title="配置SpringBoot"></a>配置SpringBoot</h2><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><h2 id="读取应用配置"><a href="#读取应用配置" class="headerlink" title="读取应用配置"></a>读取应用配置</h2><h2 id="SpringBoot自动装配"><a href="#SpringBoot自动装配" class="headerlink" title="SpringBoot自动装配"></a>SpringBoot自动装配</h2><h1 id="SpringBoot应用"><a href="#SpringBoot应用" class="headerlink" title="SpringBoot应用"></a>SpringBoot应用</h1><h1 id="Testing单元测试"><a href="#Testing单元测试" class="headerlink" title="Testing单元测试"></a>Testing单元测试</h1><h2 id="JUnit介绍"><a href="#JUnit介绍" class="headerlink" title="JUnit介绍"></a>JUnit介绍</h2><h2 id="SpringBoot单元测试"><a href="#SpringBoot单元测试" class="headerlink" title="SpringBoot单元测试"></a>SpringBoot单元测试</h2><h2 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h2><h2 id="面向数据库应用的单元测试"><a href="#面向数据库应用的单元测试" class="headerlink" title="面向数据库应用的单元测试"></a>面向数据库应用的单元测试</h2><h1 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h1><p>##</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>activeMq的安装和基础</title>
      <link href="/2018/05/22/activeMq%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/05/22/activeMq%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<hr><p>申明：请尽量与我本博文所有的软件版本保持一致，避免不必要的错误。</p><p>所用软件版本列表：<br>    activeMq：apache-activemq-5.15.3-bin.tar.gz<br>    JDK8</p><p> 所用软件官方网站列表：<br>     activeMq官网：<a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a><br>    activeMq5.15.3：<a href="http://activemq.apache.org/activemq-5153-release.html" target="_blank" rel="noopener">http://activemq.apache.org/activemq-5153-release.html</a></p><h1 id="activeMq的基本介绍"><a href="#activeMq的基本介绍" class="headerlink" title="activeMq的基本介绍"></a>activeMq的基本介绍</h1><h2 id="ActiveMQ是什么"><a href="#ActiveMQ是什么" class="headerlink" title="ActiveMQ是什么"></a>ActiveMQ是什么</h2><p>ActiveMQ是Apache推出的，一款开源的，完全支持JMS1.1和J2EE1.4规范的JMS Provider实现的消息中间件（Message Oriented Middleware， MOM）</p><h2 id="ActiveMQ能干什么"><a href="#ActiveMQ能干什么" class="headerlink" title="ActiveMQ能干什么"></a>ActiveMQ能干什么</h2><p>最主要的功能就是：实现JMS Provider 用来帮助实现高可用、高性能、可伸缩、易用和安全的企业级面向消息服务的系统</p><h2 id="ActiveMQ特点"><a href="#ActiveMQ特点" class="headerlink" title="ActiveMQ特点"></a>ActiveMQ特点</h2><p>  完全支持JMS1.1和J2EE1.4规范（持久化，XA消息，事务）<br>  完全多种传送协议：in-VM，TCP，SSL，NIO，UDP，JGroups，JXTA<br>  可插拔的体系结构，可以灵活定制，如：消息存储方式、安全管理等<br>  很容易和Application Server集成使用<br>  多种语言和协议编写客户端。语言：Java，C，C++，C#，Ruby，Perl，Python，PHP<br>  从设计上保证了高性能的集群，客户端-服务器，点对点<br>  可以很容易和spring结合使用<br>  支持通过JDBC和journal提供高速的消息持久化<br>  支持与Axis的整合</p><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><p>  MOM基本功能：将消息以消息的形式，从一个应用程序传送到另一个或多个应用程序。<br>  MOM主要特点：</p><ol><li>消息一部接收，类似手机短信的行为，消息发送者不需要等待消息接受者的响应，减少软件多系统集成的耦合度；</li><li><p>消息可靠接收，确保消息在中间件可靠保存，只有接收方收到后才会删除消息，多个消息也可以组成原子事务</p><p>消息中间件的主要应用场景：<br>在多个系统间进行整合和通讯的时候，通常会要求：</p><ol><li>可靠传输，数据不能丢失，有的时候，也会要求不能重复传输；</li><li>异步传输，否则各个系统同步发送接收数据，互相等待，造成系统瓶颈</li></ol></li></ol><p>目前比较知名的消息中间件：<br>IBM MQSeries<br>BEA WebLogic JMS Server<br>Oracle AQ<br>Tibco<br>SwiftMQ<br>ActiveMQ：是免费的Java实现的消息中间件</p><h1 id="ActiveMq的安装和基本使用"><a href="#ActiveMq的安装和基本使用" class="headerlink" title="ActiveMq的安装和基本使用"></a>ActiveMq的安装和基本使用</h1><h2 id="下载并安装ActiveMQ服务器端"><a href="#下载并安装ActiveMQ服务器端" class="headerlink" title="下载并安装ActiveMQ服务器端"></a>下载并安装ActiveMQ服务器端</h2><ol><li><p>下载ActiveMQ<br> 在Linux系统中输入一下下载命令：<br> <code>wget http://mirrors.hust.edu.cn/apache//activemq/5.15.3/apache-activemq-5.15.3-bin.tar.gz</code></p></li><li><p>直接解压，然后拷贝到你要安装的位置就好了<br> <code>tar -zxvf apache-activemq-5.15.3-bin.tar.gz</code></p></li><li><p>启动运行</p><ol><li>普通启动：到ActiveMQ/bin下面，<code>./activemq start</code></li><li>启动并指定日志文件 <code>./activemq start &gt; /tmp/activemqlog</code></li></ol></li><li><p>检查是否已经启动<br>ActiveMQ默认采用61616端口提供JMS服务，使用8161端口提供管理控制台服务，执行以下命令便以检验是否已成功启动ActiveMQ服务：</p><ol><li>比如查看61616端口是否打开：<code>netstat -an | grep 61616</code></li><li>也可以直接查看控制台输出或者日志文件</li><li>还可以直接访问ActiveMQ的管理控制台页面： <a href="http://192.168.159.170:8161/admin/" target="_blank" rel="noopener">http://192.168.159.170:8161/admin/</a> 默认的用户名和密码都是admin/admin</li></ol><p>关闭ActiveMQ，可以用 ./activemq stop<br>  暴力点可以直接用<code>ps -ef | grep activemq</code> 来得到进程号，然后kill掉</p><p>不要忘记开放linux端口号<br>  <code>firewall-cmd --zone=public --add-port=8161/tcp --permanent</code><br>  <code>firewall-cmd --zone=public --add-port=61616/tcp --permanent</code><br>  重启防火墙：<code>firewall-cmd --reload</code><br>  查看开放的端口号：<code>firewall-cmd --list-ports</code></p></li></ol><p>ActiveMQ 后台管理页面：<br>       <img src="./images/1526984596857.jpg" alt="enter description here" title="1526984596857.jpg"></p><h1 id="基本的Queue消息发送"><a href="#基本的Queue消息发送" class="headerlink" title="基本的Queue消息发送"></a>基本的Queue消息发送</h1><h2 id="配置Maven所需的依赖，示例如下："><a href="#配置Maven所需的依赖，示例如下：" class="headerlink" title="配置Maven所需的依赖，示例如下："></a>配置Maven所需的依赖，示例如下：</h2><p>1.创建maven项目：<br>2.引入项目activemq依赖<br><img src="./images/1526991821022.jpg" alt="enter description here" title="1526991821022.jpg"><br>依赖代码如下：</p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activemq-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.xbean<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xbean-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本的生产者和消费者代码示例"><a href="#基本的生产者和消费者代码示例" class="headerlink" title="基本的生产者和消费者代码示例"></a>基本的生产者和消费者代码示例</h2><p>生产者 QueueSender代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueSender</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建连接工厂</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"tcp://192.168.159.170:61616"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从连接工厂获取连接</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动连接</span>        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从连接中获取该次session会话，并设置事务</span>        Session session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Session<span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建会话队列</span>        Destination destination <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token string">"my-queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建生产者</span>        MessageProducer producer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建消息对象</span>            TextMessage message <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span><span class="token string">"message---"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//生产者发送消息</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//提交事务</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭session会话</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行生产者之后，后台会出现生产者的信息，如下图：<br><img src="./images/1526994502944.jpg" alt="enter description here" title="1526994502944.jpg"></p><p>消费者代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建连接工厂</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"tcp://192.168.159.170:61616"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从连接工厂获取连接</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动连接</span>        connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从连接中获取该次session会话，并设置事务</span>        Session session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> Session<span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建会话队列</span>        Destination destination <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token string">"my-queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建消费者</span>        MessageConsumer consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出消息</span>            TextMessage message <span class="token operator">=</span> <span class="token punctuation">(</span>TextMessage<span class="token punctuation">)</span> consumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到消息："</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关闭session会话</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台结果如下<br><img src="./images/1526994968264.jpg" alt="enter description here" title="1526994968264.jpg"><br><img src="./images/1526995010835.jpg" alt="enter description here" title="1526995010835.jpg"></p><h1 id="JMS基本概念和模型"><a href="#JMS基本概念和模型" class="headerlink" title="JMS基本概念和模型"></a>JMS基本概念和模型</h1><h2 id="JMS基本概念"><a href="#JMS基本概念" class="headerlink" title="JMS基本概念"></a>JMS基本概念</h2><p><strong>JSM是什么</strong><br>JMS Java Message Service，Java消息服务，是Java EE中的一个技术</p><p><strong>JMS规范</strong><br>  JMS定义了Java中访问消息中间件的接口，并没有给予实现，实现JMS接口的消息中间件称为JSM Provider，例如ActiveMQ</p><p><strong>JMS Provider</strong><br>  实现了JMS接口和规范的消息中间件<br><strong>JMS Message</strong><br> JMS的消息，JMS消息由以下三部分组成：</p><ol><li>消息头：每个消息头字段都有相应的getter和setter方法</li><li>消息属性：如果需要除消息头字段以为的值，那么可以使用消息属性</li><li>消息体：封装具体的消息数据</li></ol><p><strong>JMS Producer</strong><br>消息消费者，创建和发送JMS消息的客户端应用<br><strong>JMS Consumer</strong><br>消息消费者，接收和处理JMS消息的客户端应用</p><p>消息的消费可以采用以下两种方法之一：</p><ol><li>同步消费：通过调用消费者的receive方法从目的地中显示提取消息，receive方法可以一直阻塞到消息到达。</li><li>异步消费：客户可以为消费者注册一个消息监听器，以定义在消息到达时所采取的动作。</li></ol><p><strong>JMS Domains</strong><br>消息传递域，JMS规范中定义了两种欧冠呢消息传递域：点对点（point-to-point，简写成PTP）消息传递域和发布/订阅消息传递域（publish/subscribe，简写成pub/sub）</p><ol><li><p>点对点消息传递域的特点如下：<br> （1） 每个消息只能有一个消费者<br> （2）消息的生产者和消费者之间没有时间上的关联性。无论消费者在生产者发送消息的时候是否处于运行状态，他都可以提取消息。<br> <img src="./images/1526996128681.jpg" alt="enter description here" title="1526996128681.jpg"></p><ol start="2"><li>发布/订阅消息传递域的特点如下：<br>（1）每个消息可以有多个消费者<br>（2）生产者和消费者之间有时间上的相关性。订阅一个主题的消费者只能消费自它订阅之后发布的消息。JMS规范允许客户创建持久订阅，这在一定程度上放松了时间上的相关性要求。持久订阅允许消费者消费它在未处于激活状态时发送的消息。</li></ol></li><li>在点对点消息传递域中，目的地被称为队列（queue）；在发布/订阅消息传递域中，目的地被称为主题（topic）<br><img src="./images/1526996412125.jpg" alt="enter description here" title="1526996412125.jpg"></li></ol><p><strong>Connection factory</strong><br>链接工厂，用来创建连接对象，以连接到JSM的provider<br><strong>JMS Connection</strong><br>封装了客户与JMS 提供者之间的一个虚拟的连接<br><strong>JMS Session</strong><br>是生产者和消费者的一个单线程上下文<br>  会话用于创建消息生产者（producer）、消息消费者（consumer）和消息（message）等。会话提供了一个事务性的上下文，在这个上下文中，一组发送和接收被组合到了一个原子操作中。<br><strong>Destination</strong><br>消息发送到的目的地<br><strong>Acknowledge</strong><br>签收<br><strong>Transaction</strong><br>事务<br><strong>JMS client</strong><br>用来收发消息的Java应用<br><strong>Non-JMS client</strong><br>使用JMS Provider本地API写的应用，用来替换JMS API实现收发消息的功能，通常会提供其他的一些特性，比如：CORBA、RMI等。<br><strong>Administered objects</strong><br>预定义的JMS对象，通常在provider规范中有定义，提供给JMS客户端来访问，比如：ConnectionFactory和Destination</p><h2 id="JMS的消息结构"><a href="#JMS的消息结构" class="headerlink" title="JMS的消息结构"></a>JMS的消息结构</h2><p><strong>JMS 消息由以下几个部分组成</strong><br>消息头、属性和消息体<br><strong>消息头包含消息的识别信息和路由信息，消息头包含一些标准的属性如下：</strong></p><ol><li>JMSDestination：由send方法设置</li><li>JMSDeliveryMode：由send方法设置</li><li>JMSExpiration：由send方法设置</li><li>JMSPriority：由send方法设置</li><li>JMSMessageID：由send方法设置</li><li>JMSTimestamp：由客户端设置</li><li>JMSCorrelationID：由客户端设置</li><li>JMSReplyTo：由客户端设置</li><li>JMSType：由客户端设置</li><li>JMSRedelivered：由JMS Provider设置</li></ol><p><strong>标准的JMS消息头包含以下属性：</strong></p><ol><li>JMSDestination：消息发送的目的地：主要是指Queue和Topic，自动分配</li><li>JMSDeliveryMode：传送模式。有两种：持久模式和非持久模式。一条持久性的消息应该被传送“一次仅仅一次”，这就意味着如果JMS提供者出现故障，该消息并不会丢失，它会在服务器回复之后再次传递。一条非持久的消息最多会传递一次，这意味着服务器出现故障，该消息将永远丢失。自动分配</li><li>JMSExpiration：消息过期时间，等于Destination的send方法中的timeToLive值加上发送时刻的GMT时间值。如果timeToLive值等于零，则JMSExpiration被设为零，表示该消息永不过期。如果发送后，在消息过期时间之后消息还没有被发送到目的地，则该消息被清除。自动分配</li><li>JMSPriority：消息优先级，从0-9十个级别，0-4是普通消息级别，5-9是加急消息。JMS不要求JMS Provider严格按照这十个优先级发送消息，但必须保证加急消息要优先于普通消息到达。默认是4级。自动分配</li><li>JMSMessageID：唯一识别每个消息的表示，由JMS Provider产生。自动分配</li><li>JMSTimestamp：一个JMS Provider在调用send（）方法时自动设置的。它是消息被发送和消费者实际接收的时间差。自动分配</li><li>JMSCorrelationID：用来连接到另一个消息，典型的应用是在回复消息中连接到原消息。在大多数情况下，JMSCorrelationID用于将一条消息标记为对JMSMessageID标示的上一条消息的应答，不过，JMSCorrelationID可以是任何值，不仅仅是JMSMessageID。由开发者设置</li><li>JMSReplyTo：提供本消息回复消息的目的地地址。由开发者设置</li><li>JMSType：消息类型的标识符。由开发者设置</li><li>JMSRedelivered：如果一个客户端收到一个设置了JMSRedelivered属性的消息，则表示可能客户端曾经在早些的时候接收到过该消息，但并没有签收（acknowledged）。如果该消息被重新传送，JMSRedelivered=true反之，JMSRedelivered=false。自动设置</li></ol><p><strong>消息体</strong><br>JMS API定义了5种消息体格式，也叫消息类型，可以使用不同形式发送接收数据，并可以兼容现有的消息格式。包括：TextMessage、MapMessage、ByteMessage、StreamMessage和ObjectMessage<br><strong>消息属性，包含以下三种类型的属性</strong></p><ol><li>应用程序设置和添加的属性，比如：<br>Message.setStringProperty(“username”,username);</li><li>JMS定义的属性<br>使用“JMSX”作为属性名的前缀，connection.getMetaData().getJMSXPropertyNames()，方法返回所有连接支持的JMSX属性的名字。</li><li>JMS供应商特定的属性<br><strong>JMS定义的属性如下：</strong></li><li>JMSXUserID：发送消息的用户标识，发送时提供商设置</li><li>JMSXAppID：发送消息的应用标识，发送时提供商设置</li><li>JMSXDeliveryCount：转发消息重试次数，第一次是1，第二次是2，…，发送时提供商设置</li><li>JMSXGroupID：消息所在消息组的标识，由客户端设置</li><li>JMSXGroupSeq：组成消息的序列号第一个消息是1，第二个是2，…，有客户端设置</li><li>JMSXProducerTXID：产生消息的事务的事务标识，发送时提供商设置</li><li>JMSXConsumerTXID：消费消息的事务的事务标识，接收时提供商设置</li><li>JMSXRcvTimestamp：JMS转发消息到消费者的时间，接收时提供商设置</li><li>JMSXState：假定存在一个消息库，它存储了每个消息的单独拷贝，且这些消息从原始消息被发送时开始。每个拷贝的状态有：1（等待），2（准备），3（到期）或4（保留）。由于状态与生产者和消费者无关，所以它不是由我们来提供，它是和在仓库中查找消息相关，因此JMS没有提供这种API。由供应商设置</li></ol><h1 id="JMS的可靠性机制"><a href="#JMS的可靠性机制" class="headerlink" title="JMS的可靠性机制"></a>JMS的可靠性机制</h1><h2 id="消息接收确认"><a href="#消息接收确认" class="headerlink" title="消息接收确认"></a>消息接收确认</h2><p>  JMS消息只有在被确认之后，才认为已经被成功消费了。消息的成功消费通常包含三个阶段：客户接收消息、客户处理消息和消息被确认。<br>  在事务性会话中，当一个事务被提交的时候，确认自动发生。在非事务性会话中，消息何时被确认取决于创建会话时的应答模式（acknowledgement mode）。该参数有一下三个可选值：</p><ol><li>Session.AUTO_ACKNOWLEDGE：当客户成功的从receive方法返回的时候，或者从MessageListener.onMessage方法成功返回的时候，会话自动确认客户收到的消息。</li><li>Session.CLIENT_ACKNOWLEDGE：客户通过调用消息的acknowledge方法确认消息。需要注意的是，在这种模式中，确认是在会话层上进行，确认一个被消费的消息将自动确认所有已被会话消费的消息。例如：如果一个消息消费者消费了10个消息，然后确认第5个消息，那么所有10个消息都被确认。</li><li>Session.DUPS_ACKNOWLEDGE：该选择只是会话迟钝的确认消息的提交。如果JMS provider失败，那么可能会导致一些重复的消息。如果是重复的消息，那么JMS provider必须把消息头的JMSRedelivered字段设置为true</li></ol><h2 id="消息持久性"><a href="#消息持久性" class="headerlink" title="消息持久性"></a>消息持久性</h2><p>PERSISTENT：指示JMS provider持久保存消息，以保证消息不会因为JMS provider的失败而丢失<br>NON_PERSISTENT：不要求JMS provider持久保存消息</p><h2 id="消息优先级"><a href="#消息优先级" class="headerlink" title="消息优先级"></a>消息优先级</h2><p>可以使用消息优先级来指示JMS provider首先提交紧急的消息。优先级分10个级别，从0（最低）到9（最高）。如果不指定优先级，默认级别是4.需要注意的是，JMS provider并不一定保证安好优先级的顺序提交消息</p><h2 id="消息过期"><a href="#消息过期" class="headerlink" title="消息过期"></a>消息过期</h2><p>可以设置消息在一定时间后过期，默认是永不过期</p><h2 id="消息的临时目的地"><a href="#消息的临时目的地" class="headerlink" title="消息的临时目的地"></a>消息的临时目的地</h2><p>可以通过会话上的createTemporaryQueue方法和createTemporaryTopic方法来创建临时目的地。它们的存在时间只限于创建它们的连接所保持的时间。只有创建该临时目的地的连接上的消息消费者才能够从临时目的地中提取消息</p><h2 id="持久订阅"><a href="#持久订阅" class="headerlink" title="持久订阅"></a>持久订阅</h2><p>首先消息生产者必须使用PERSISTENT提交消息。客户可以通过会话上的createDurableSubscriber方法来创建一个持久订阅，该方法的第一个参数必须是topic。第二个参数是订阅的名称。<br>  JMS provider会存储发布到持久订阅对应的topic上的消息。如果最初创建持久订阅的客户或者任何其它客户，使用相同的连接工厂和连接的客户ID，相同的主题和相同的订阅名，再次调用会话上的createDurableSubscriber方法，那么该持久订阅就会被激活。JMS provider会向客户发送客户处于非激活状态时所发布的消息。<br>  持久订阅在某个时刻只能有一个激活的订阅者。持久订阅在创建之后会一直保留，直到应用程序调用会话上的unsubscribe方法。</p><h2 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h2><p>  在一个JMS客户端，可以使用本地事务来组合消息的发送射接收。JMS Session接口提供了commit和rollback方法。事务提交意味着生产的所有消息被发送，消费的需所有消息被确认；事务回滚意味着生产的所有消息被销毁，消费的所有消息被回复并重新提交，除非它们已经过期。<br>  事务性的会话总是牵涉到事务处理中，commit或rollback方法一旦被调用，一个事物就结束了，而另一个事务被开始。关闭事务性会话将回滚其中的事务。<br>  需要注意的是，如果使用请求/回复机制，即发送一个消息，同时希望在同一个事物中等待接收该消息的回复，那么程序将被挂起，因为直到事务提交，发送操作才会真正执行。<br>  需要注意的还有一个，消息的生产和消费不能包含在同一个事务中。</p><h2 id="JMS的PTP模型"><a href="#JMS的PTP模型" class="headerlink" title="JMS的PTP模型"></a>JMS的PTP模型</h2><p><strong>JMS PTP</strong>模型定义了客户端如何向队列发送消息，从队列接收消息，以及浏览队列中的消息。<br>  PTP模型是基于队列的，生产者发消息到队列，消费者从队列接收消息，队列的存在使得消息的异步传输成为可能。和右键系统中的邮箱一样，队列可以包含各种消息，JMS Provider提供工具管理队列的创建、删除。<br><strong>PTP的一些特点</strong></p><ol><li>如果在session关闭时，有一些消息已经被接收到，但还没有被签收（acknowledged），那么，当消费者下次连接到相同的队列时，这些消息还会被再次接收</li><li>如果用户在receive方法 中设定了消息选择条件，那么不符合条件的消息会留在队列中，不会被接收到</li><li>队列可以长久地保存消息直到消费者接收消息。消费者不需要因为担心消息会丢失而时刻和队列保持激活的连接状态，充分体现了异步传输模式的优势</li></ol><h2 id="JMS的Pub-Sub模型"><a href="#JMS的Pub-Sub模型" class="headerlink" title="JMS的Pub/Sub模型"></a>JMS的Pub/Sub模型</h2><p><strong>JMS Pub/Sub</strong>模型定义了如何向一内容节点发布和订阅消息，这些节点被称作topic<br>主题可以被认为是消息的传输中介，发布者（publisher）发布消息到主题，订阅者（subscribe）从主题订阅消息。主题使得消息订阅者和消息发布者保持相互的独立，不需要接触即可保持消息的传递。<br><strong>Pub/Sub的一些特点</strong></p><ol><li>消息订阅分为非持久订阅和持久订阅<br> 非持久订阅只有当客户端处于激活状态，也就是JMS provider保持连接状态才能收到发送到某个主题的消息，而当客户端处于离线的状态，这个时间段发到主题的消息将会丢失，永远不会收到。<br> 持久订阅时，客户端向JMS注册一个识别自己身份的ID，当这个客户端处于离线时，JMS provider会为这个ID保存所有发送到主题的消息，当客户端处于离线时，JMS Provider会为这个ID保持所有发送到主题的消息，当客户再次连接到JMS Provider时，会根据自己的ID得到所有当自己处于离线时发送到主题的消息。</li><li>如果用户在receive方法中设定了消息选择条件，那么不符合条件的消息不会被接收</li><li>非持久订阅状态下，不能恢复或重新派送一个未签收的消息。只有持久订阅才能恢复或重新派送一个未签收的消息。</li><li>当所有的消息必须被接收，则用持久订阅。当丢失消息能够被容忍，则用非持久订阅</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>搭建github个人博客</title>
      <link href="/2018/05/21/%E6%90%AD%E5%BB%BAgithub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/05/21/%E6%90%AD%E5%BB%BAgithub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>前言：电脑系统为window 10专业版，64位</p><p><strong>相关步骤：</strong></p><p>1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下<br><img src="/images/githubBlog/1526913209674.jpg" alt="enter description here" title="1526913209674.jpg"></p><p> 2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择<br> <img src="/images/githubBlog/1526913249105.jpg" alt="enter description here" title="1526913249105.jpg"></p><p><em>注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图</em><br><img src="/images/githubBlog/1526913339718.jpg" alt="enter description here" title="1526913339718.jpg"></p><p> 3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README<br><img src="/images/githubBlog/1526913655293.jpg" alt="enter description here" title="1526913655293.jpg"></p><p>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。<br><img src="/images/githubBlog/1526913543645.jpg" alt="enter description here" title="1526913543645.jpg"><br><em>因我之前已经建好了，所以上一步只能用test名字代替测试，下面的都正常用hlmk</em></p><p> 4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面<br><img src="/images/githubBlog/1526913709966.jpg" alt="enter description here" title="1526913709966.jpg"></p><p>输入npm install hexo -g，开始安装Hexo<br><img src="/images/githubBlog/1526913731253.jpg" alt="enter description here" title="1526913731253.jpg"></p><p>输入hexo -v，检查hexo是否安装成功<br><img src="/images/githubBlog/1526913740128.jpg" alt="enter description here" title="1526913740128.jpg"></p><p>输入hexo init，初始化该文件夹（有点漫长的等待。。。）<br><img src="/images/githubBlog/1526913749309.jpg" alt="enter description here" title="1526913749309.jpg"><br><em>分割线–</em><br><img src="/images/githubBlog/1526913760169.jpg" alt="enter description here" title="1526913760169.jpg"></p><p>看到后面的“Start blogging with Hexo！”，激动有木有！！！！！</p><p>输入npm install，安装所需要的组件<br><img src="/images/githubBlog/1526913899957.jpg" alt="enter description here" title="1526913899957.jpg"></p><p>输入hexo g，首次体验Hexo<br><img src="/images/githubBlog/1526913912180.jpg" alt="enter description here" title="1526913912180.jpg"></p><p> 输入hexo s，开启服务器，访问该网址，正式体验Hexo<br><img src="/images/githubBlog/1526913926853.jpg" alt="enter description here" title="1526913926853.jpg"></p><p>问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号<br><img src="/images/githubBlog/1526913948340.jpg" alt="enter description here" title="1526913948340.jpg"></p><p>那么出现如下图就成功了<br><img src="/images/githubBlog/1526913958068.jpg" alt="enter description here" title="1526913958068.jpg"></p><p> 5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）<br><img src="/images/githubBlog/1526913969715.jpg" alt="enter description here" title="1526913969715.jpg"></p><p>上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱</p><p>输入cd ~/.ssh，检查是否由.ssh的文件夹<br><img src="/images/githubBlog/1526913978185.jpg" alt="enter description here" title="1526913978185.jpg"></p><p>输入ls，列出该文件下的内容。下图说明存在<br><img src="/images/githubBlog/1526914039169.jpg" alt="enter description here" title="1526914039169.jpg"></p><p> 输入ssh-keygen -t rsa -C “<a href="mailto:929762930@qq.com" target="_blank" rel="noopener">929762930@qq.com</a>”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。<br><img src="/images/githubBlog/1526914051384.jpg" alt="enter description here" title="1526914051384.jpg"></p><p> 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent<br><img src="/images/githubBlog/1526914067478.jpg" alt="enter description here" title="1526914067478.jpg"></p><p> 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent<br><img src="/images/githubBlog/1526914114518.jpg" alt="enter description here" title="1526914114518.jpg"></p><p> 登录Github，点击头像下的settings，添加ssh<br><img src="/images/githubBlog/1526914130644.jpg" alt="enter description here" title="1526914130644.jpg"></p><p>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去<br><img src="/images/githubBlog/1526914140464.jpg" alt="enter description here" title="1526914140464.jpg"></p><p>输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了<br><img src="/images/githubBlog/1526914152124.jpg" alt="enter description here" title="1526914152124.jpg"></p><p>问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决</p><p>首先，清除所有的key-pair<br>ssh-add -D<br>rm -r ~/.ssh<br>删除你在github中的public-key</p><p>重新生成ssh密钥对<br>ssh-keygen -t rsa -C “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“</p><p>接下来正常操作<br>在github上添加公钥public-key:<br>1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板<br>2、在github上添加公钥时，直接复制即可<br>3、保存</p><p>测试：<br>在终端 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p>6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）<br><img src="/images/githubBlog/1526914196527.jpg" alt="enter description here" title="1526914196527.jpg"></p><p>repo值是你在github项目里的ssh（右下角）<br><img src="/images/githubBlog/1526914230324.jpg" alt="enter description here" title="1526914230324.jpg"></p><p>7、新建一篇博客，在cmd执行命令：hexo new post “博客名”<br><img src="/images/githubBlog/1526914249036.jpg" alt="enter description here" title="1526914249036.jpg"></p><p> 这时候在文件夹_posts目录下将会看到已经创建的文件<br><img src="/images/githubBlog/1526914259780.jpg" alt="enter description here" title="1526914259780.jpg"></p><p>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save<br><img src="/images/githubBlog/1526914268610.jpg" alt="enter description here" title="1526914268610.jpg"></p><p>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了<br><img src="/images/githubBlog/1526914278457.jpg" alt="enter description here" title="1526914278457.jpg"></p><p>部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章<br><img src="/images/githubBlog/1526914299651.jpg" alt="enter description here" title="1526914299651.jpg"></p><p> 好了，到此为止，基本的hexo完成，下满就是选择自己满意的插件整合进去</p><p>我选用的插件地址是：<a href="https://material.viosey.com/" target="_blank" rel="noopener">https://material.viosey.com/</a><br>1.进入github页面下载<br><img src="/images/githubBlog/1526916181661.jpg" alt="enter description here" title="1526916181661.jpg"><br>下载zip文件<br><img src="/images/githubBlog/1526916231835.jpg" alt="enter description here" title="1526916231835.jpg"><br>参考文档安装<br><img src="/images/githubBlog/1526916316591.jpg" alt="enter description here" title="1526916316591.jpg"></p><p>2.将下载下来的文件按照文档说明，解压到themes目录，并且将问价夹改名为material<br><img src="/images/githubBlog/1526916597591.jpg" alt="enter description here" title="1526916597591.jpg"></p><p>3.将_config.yml文件内的theme:改为material<br><img src="/images/githubBlog/1526916670470.jpg" alt="enter description here" title="1526916670470.jpg"></p><p>4.将解压文件内的_config.template.yml复制一份并改名为_config.yml<br><img src="/images/githubBlog/1526916820311.jpg" alt="enter description here" title="1526916820311.jpg"></p><p>5.启动hexo<br><img src="/images/githubBlog/1526916908750.jpg" alt="enter description here" title="1526916908750.jpg"></p><p>6.本地页面访问<br><img src="/images/githubBlog/1526916962616.jpg" alt="enter description here" title="1526916962616.jpg"></p><p>7.发布到github<br><img src="/images/githubBlog/1526917303706.jpg" alt="enter description here" title="1526917303706.jpg"></p><p>8.github访问<br><img src="/images/githubBlog/1526917350648.jpg" alt="enter description here" title="1526917350648.jpg"></p><p>9.其他一些具体参数和发布文章，参考文档：<a href="https://material.viosey.com/docs/#/start" target="_blank" rel="noopener">https://material.viosey.com/docs/#/start</a></p><p>参考博客：<a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/21/hello-world/"/>
      <url>/2018/05/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
  
</search>
